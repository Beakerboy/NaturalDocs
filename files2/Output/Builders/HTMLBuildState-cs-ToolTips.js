NDContentPage.OnToolTipsLoaded({49:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype49\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;CodeDB.</span>&#8203;Manager</div></div></div><div class=\"TTSummary\">A class to manage information about various aspects of the code and its documentation.</div></div>",226:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype226\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Collections.</span>&#8203;StringTable&#8203;<span class=\"TemplateSignature\">&lt;ObjectType&gt;</span></div></div></div><div class=\"TTSummary\">A generic lookup table for mapping strings to other objects.&nbsp; This is preferable to a Dictionary&lt;string, object&gt; class because:</div></div>",241:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype241\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Collections.</span>&#8203;StringSet</div></div></div><div class=\"TTSummary\">A general lookup table for tracking the existence of strings in a set.&nbsp; This is preferable to a HashSet class because</div></div>",1517:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1517\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;IDObjects.</span>&#8203;NumberSet</div></div></div><div class=\"TTSummary\">A class for efficiently storing a large list of ID numbers and determining which ones are still available.&nbsp; Also focuses on reusing deleted ID numbers rather than continuing on in autoincrement fashion.</div></div>",2196:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype2196\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Output.&#8203;Builders.</span>&#8203;HTMLBuildState</div></div></div><div class=\"TTSummary\">A class encompassing all the build state information for a HTML output target.</div></div>",2197:"<div class=\"NDToolTip TFile LCSharp\"><div class=\"TTSummary\">A file used to store the build state of this output target the last time it was built.</div></div>",2218:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype2218\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> IDObjects.NumberSet sourceFilesToRebuild</div></div>",3059:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3059\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> List&lt;KeywordEntry&gt; GetKeywordEntries (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">prefix,</td></tr><tr><td class=\"PModifierQualifier first\">CodeDB.</td><td class=\"PType\">Accessor&nbsp;</td><td class=\"PName last\">accessor,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">CancelDelegate&nbsp;</td><td class=\"PName last\">cancelDelegate</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns a list of all the KeywordEntries for a prefix, complete with all their TopicEntries.&nbsp; If there are none it will return null.&nbsp; The returned list will not be in any particular order, it is up to the calling code to sort them as desired.</div></div>",3786:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3786\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.</span>&#8203;Path</div></div></div><div class=\"TTSummary\">A struct encapsulating a file path string.&nbsp; This is needed because Natural Docs needs to be able to handle all three path formats at once, not just the local format.&nbsp; Natural Docs on Windows may be reading a configuration file from Natural Docs on Linux and vice versa.</div></div>"});