NDContentPage.OnToolTipsLoaded({226:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype226\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Collections.</span>&#8203;StringTable&#8203;<span class=\"TemplateSignature\">&lt;ObjectType&gt;</span></div></div></div><div class=\"TTSummary\">A generic lookup table for mapping strings to other objects.&nbsp; This is preferable to a Dictionary&lt;string, object&gt; class because:</div></div>",241:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype241\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Collections.</span>&#8203;StringSet</div></div></div><div class=\"TTSummary\">A general lookup table for tracking the existence of strings in a set.&nbsp; This is preferable to a HashSet class because</div></div>",364:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype364\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;CommentTypes.</span>&#8203;Manager</div></div></div><div class=\"TTSummary\">A module to handle Comments.txt and all the comment type settings within Natural Docs.</div></div>",742:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype742\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Comments.</span>&#8203;PossibleDocumentationComment</div></div></div><div class=\"TTSummary\">A class representing a comment found in source code which could possibly contain documentation.</div></div>",756:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype756\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Comments.</span>&#8203;Parser</div></div></div><div class=\"TTSummary\">A base class for Natural Docs comment parsers.</div></div>",778:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype778\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Comments.</span>&#8203;Manager</div></div></div><div class=\"TTSummary\">A module which will handle comment parsing.</div></div>",816:"<div class=\"NDToolTip TFile LCSharp\"><div class=\"TTSummary\">A configuration file to handle various non-topic keywords in Natural Docs formatted comments.&nbsp; The file follows the standard conventions in ConfigFile.&nbsp; Identifier and value whitespace is condensed.</div></div>",817:"<div class=\"NDToolTip TFile LCSharp\"><div class=\"TTSummary\">A binary file to store the last version of Parser.txt used in order to detect changes.</div></div>",819:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype819\" class=\"NDPrototype NoParameterForm\"><div class=\"PPrePrototypeLine\"><span class=\"SHMetadata\">[Flags]</span></div><span class=\"SHKeyword\">public enum</span> LinkInterpretationFlags : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">Options you can pass to LinkInterpretations().</div></div>",820:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">If set, the unaltered input string will not be added as one of the interpretations.&nbsp; Only alternate interpretations such as named links or plural/possessive conversions will be included, provided the relevant flags are set.</div></div>",824:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype824\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> BlockType : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">The type of block started by lines like &quot;(start code)&quot;.</div></div>",828:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype828\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> HeadingType : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">The type of block started by a recognized heading.</div></div>",831:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype831\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected enum</span> SetIndex</div><div class=\"TTSummary\">The index into sets for each item.&nbsp; The values must start at zero and proceed sequentially.&nbsp; MaxValue must be set to the highest used value.&nbsp; The value names are used by LoadFile(), so they must match the possible set names in Parser.txt exactly with the exception of spaces.</div></div>",832:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype832\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected enum</span> TableIndex</div><div class=\"TTSummary\">The index into tables for each item.&nbsp; The values must start at zero and proceed sequentially.&nbsp; MaxValue must be set to the highest used value.&nbsp; The value names are used by LoadFile(), so they must match the possible table names in Parser.txt exactly with the exception of spaces.</div></div>",833:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype833\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected enum</span> ConversionListIndex</div><div class=\"TTSummary\">The index into conversionLists for each item.&nbsp; The values must start at zero and proceed sequentially.&nbsp; MaxValue must be set to the highest used value.&nbsp; The value names are used by LoadFile(), so they must match the possible list names in Parser.txt exactly with the exception of spaces.</div></div>",838:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype838\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> List&lt;LinkInterpretation&gt; LinkInterpretations (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">linkText,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">LinkInterpretationFlags&nbsp;</td><td class=\"PName last\">flags,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">parameters</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Generates a list of possible interpretations for the passed target of a Natural Docs link, or null if there are none.&nbsp; If LinkInterpretationFlags.ExcludeLiteral is not set it will always return a list of at least one interpretation.</div></div>",855:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype855\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> IsStandalonePreformattedLine (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">LineIterator&nbsp;</td><td class=\"PName last\">lineIterator,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">line,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">indent,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">leadingCharacter</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the line specified by the LineIterator is a standalone preformatted line, meaning it starts with :, &gt;, or |.&nbsp; If so, returns it as a string with leading whitespace preserved and all tabs expanded.&nbsp; Any comment symbols, decoration, and the leading :, &gt;, or | will be replaced by spaces.&nbsp; Trailing whitespace will be removed, and empty lines will return empty strings with indent 0.</div></div>",869:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype869\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> MarkPossibleFormattingTags (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">tokenizer</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the passed Tokenizer and marks asterisks and underscores with CommentParsingType.PossibleOpeningTag and CommentParsingType.PossibleClosingTag if they can possibly be interpreted as bold and underline formatting.</div></div>",871:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype871\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> MarkPossibleInlineImageTags (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">tokenizer</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the passed Tokenizer and marks parentheses with CommentParsingType.PossibleOpeningTag and CommentParsingType.PossibleClosingTag if they can possibly be used for inline images.&nbsp; This does NOT validate the content of the parentheses, merely that they are acceptable candidates.</div></div>",872:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype872\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> FinalizeLinkTags (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">tokenizer</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the passed Tokenizer and converts all angle brackets marked as CommentParsingType.PossibleOpeningTag and CommentParsingType.PossibleClosingTag to CommentParsingType.OpeningTag, CommentParsingType.ClosingTag, or back to CommentParsingType.Null.&nbsp; It makes sure every opening tag has a closing tag and removes possible tag markings on other symbols between them.&nbsp; Call this before FinalizeInlineImageTags() and FinalizeFormattingTags() because parentheses, asterisks, and underscores can be part of a link\'s content.</div></div>",873:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype873\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> FinalizeInlineImageTags (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">tokenizer</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the passed Tokenizer and converts all parentheses marked as CommentParsingType.PossibleOpeningTag and CommentParsingType.PossibleClosingTag to CommentParsingType.OpeningTag, CommentParsingType.ClosingTag, or back to CommentParsingType.Null.&nbsp; It makes sure every opening tag has a closing tag, the content is in the right format, and removes possible tag markings on other symbols between them.&nbsp; Call this before FinalizeFormattingTags() because asterisks and underscores may be part of a tag\'s content.</div></div>",874:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype874\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> FinalizeFormattingTags (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">tokenizer</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the passed Tokenizer and converts all asterisks and underscores marked as CommentParsingType.PossibleOpeningTag and CommentParsingType.PossibleClosingTag to CommentParsingType.OpeningTag, CommentParsingType.ClosingTag, or back to CommentParsingType.Null.&nbsp; It makes sure every opening tag has a closing tag.&nbsp; Call this after FinalizeLinkTags() and FinalizeInlineImageTags() so that these are the only tokens marked as possible tags left.</div></div>",880:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype880\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static public bool</span> LoadFile (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">Path&nbsp;</td><td class=\"PName last\">filename,</td></tr><tr><td class=\"PModifierQualifier first\">Errors.</td><td class=\"PType\">ErrorList&nbsp;</td><td class=\"PName last\">errors,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">StringSet[]&nbsp;</td><td class=\"PName last\">sets,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">StringTable&lt;<span class=\"SHKeyword\">byte</span>&gt;[]&nbsp;</td><td class=\"PName last\">tables,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">List&lt;<span class=\"SHKeyword\">string</span>&gt;[]&nbsp;</td><td class=\"PName last\">conversionLists</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Loads Parser.txt and puts the results in the various out parameters, returning whether it was successful or not.&nbsp; If it wasn\'t, the out structures will still exist but be empty and all errors will be added to the error list.</div></div>",881:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype881\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static public bool</span> LoadBinaryFile (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">Path&nbsp;</td><td class=\"PName last\">filename,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">StringSet[]&nbsp;</td><td class=\"PName last\">binarySets,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">StringTable&lt;<span class=\"SHKeyword\">byte</span>&gt;[]&nbsp;</td><td class=\"PName last\">binaryTables,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">List&lt;<span class=\"SHKeyword\">string</span>&gt;[]&nbsp;</td><td class=\"PName last\">binaryConversionLists</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Loads Parser.nd and puts the results in the various out parameters, returning whether it was successful or not.&nbsp; If it wasn\'t, the out structures will still exist but be empty.</div></div>",885:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype885\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static public void</span> SaveBinaryFile (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Path&nbsp;</td><td class=\"PName last\">filename,</td></tr><tr><td class=\"PType first\">StringSet[]&nbsp;</td><td class=\"PName last\">sets,</td></tr><tr><td class=\"PType first\">StringTable&lt;<span class=\"SHKeyword\">byte</span>&gt;[]&nbsp;</td><td class=\"PName last\">tables,</td></tr><tr><td class=\"PType first\">List&lt;<span class=\"SHKeyword\">string</span>&gt;[]&nbsp;</td><td class=\"PName last\">conversionLists</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Saves Parser.nd.&nbsp; Throws an exception if unsuccessful.</div></div>",890:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype890\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> StringSet[] sets</div><div class=\"TTSummary\">An array of StringSets corresponding to the sets in Parser.txt.&nbsp; Use SetIndex for indexes to get particular sets.</div></div>",891:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype891\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> StringTable&lt;<span class=\"SHKeyword\">byte</span>&gt;[] tables</div><div class=\"TTSummary\">An array of StringTables corresponding to the tables in Parser.txt.&nbsp; The values are bytes but will be safe to blindly cast to their respective enums because the values will have been validated when the files were loaded.</div></div>",892:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype892\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> List&lt;<span class=\"SHKeyword\">string</span>&gt;[] conversionLists</div><div class=\"TTSummary\">An array of string lists corresponding to the conversion lists in Parser.txt.&nbsp; Each string list is made up of string pairs where the first are the keys and the second are the values or null.&nbsp; Everything will be in lowercase and canonically composed in Unicode (FormC).&nbsp; Use ConversionListIndex for indexes to get particular tables.</div></div>",1160:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1160\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Errors.</span>&#8203;ErrorList</div></div></div><div class=\"TTSummary\">A list of Error objects.</div></div>",1200:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1200\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Config.</span>&#8203;Manager</div></div></div><div class=\"TTSummary\">A class to manage the engine\'s configuration.</div></div>",1285:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1285\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Files.&#8203;FileSources.</span>&#8203;Folder</div></div></div><div class=\"TTSummary\">A file source representing a specific folder on disk.</div></div>",1786:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1786\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Languages.</span>&#8203;Language</div></div></div><div class=\"TTSummary\">A class encapsulating information about a language.&nbsp; This differs from ConfigFileLanguage in that its meant to represent the final combined settings of a language rather than its entry in a config file.&nbsp; For example, this class doesn\'t store the language\'s extensions or shebang strings.</div></div>",1935:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype1935\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> AccessLevel : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">An enum representing a member access level.</div></div>",2080:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype2080\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Links.</span>&#8203;LinkInterpretation</div></div></div><div class=\"TTSummary\">A class representing a possible interpretation of a Natural Docs link in &lt;NDMarkup&gt;.</div></div>",3270:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">Returned when the token iterator is out of bounds or if a token hasn\'t been assigned one of these values yet.</div></div>",3273:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">An opening symbol that\'s a candidate for being part of a link, bold, or underline tag.</div></div>",3274:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">A closing symbol that\'s a candidate for being part of a link, bold, or underline tag.</div></div>",3275:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">An opening symbol that\'s a part of a link, bold, or underline tag.</div></div>",3276:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">A closing symbol that\'s a part of a link, bold, or underline tag.</div></div>",3277:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">Part of an URL.</div></div>",3278:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">Part of an e-mail address.</div></div>",3323:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3323\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;Tokenizer</div></div></div><div class=\"TTSummary\">A class for dividing a block of text into easily navigable tokens.&nbsp; See FundamentalType for a description of how they are divided up by default.</div></div>",3415:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3415\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;TokenIterator</div></div></div><div class=\"TTSummary\">An iterator for efficiently walking through the tokens in Tokenizer while keeping track of the line number and offset into the raw text.</div></div>",3485:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3485\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;LineIterator</div></div></div><div class=\"TTSummary\">An iterator to go through a Tokenizer line by line instead of token by token.</div></div>",3611:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3611\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Topics.</span>&#8203;Topic</div></div></div><div class=\"TTSummary\">A class encapsulating all the information available about a topic.</div></div>",3786:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3786\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.</span>&#8203;Path</div></div></div><div class=\"TTSummary\">A struct encapsulating a file path string.&nbsp; This is needed because Natural Docs needs to be able to handle all three path formats at once, not just the local format.&nbsp; Natural Docs on Windows may be reading a configuration file from Natural Docs on Linux and vice versa.</div></div>",4042:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype4042\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.</span>&#8203;BinaryFile</div></div></div><div class=\"TTSummary\">A class to handle reading standard Natural Docs binary configuration files.&nbsp; This class does NOT support binary files prior to version 2.0.&nbsp; Supporting those files isn\'t really necessary due to the vast changes appearing with 2.0.</div></div>",4095:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype4095\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.</span>&#8203;ConfigFile</div></div></div><div class=\"TTSummary\">A class to handle reading standard Natural Docs text-based configuration files.&nbsp; It also provides the static function TryToAnnotateWithErrors() but is otherwise not used for writing.</div></div>"});