NDSummary.OnToolTipsLoaded("File2:Comments/LineFinder.cs",{792:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype792\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public static</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Comments.</span>&#8203;LineFinder</div></div></div><div class=\"TTSummary\">A static class which finds vertical and horizontal lines in comments and marks them with Tokenization.CommentParsingType.CommentDecoration so that they can be ignored in later stages of parsing.</div></div>",793:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype793\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static void</span> MarkTextBoxes (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">PossibleDocumentationComment&nbsp;</td><td class=\"PName last\">comment</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Finds all text boxes in a comment and marks their tokens as Tokenization.CommentParsingType.CommentDecoration.&nbsp; Vertical lines will only be detected if they are continuous throughout the comment and horizontal lines if they are connected to it.&nbsp; Freestanding horizontal lines are <b>not</b> detected here.&nbsp; This function tolerates differing symbols on corners and where embedded horizontal lines connect to the vertical.&nbsp; It also tolerates tokens marked with Tokenization.CommentParsingType.CommentSymbol differing.</div></div>",794:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype794\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool</span> IsHorizontalLine (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">LineIterator&nbsp;</td><td class=\"PName last\">line</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the passed LineIterator is at a horizontal line, not including any comment symbols or decoration.</div></div>",796:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype796\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private static bool</span> CountSymbolLine (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">end,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">symbolA,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">symbolB,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">symbolC,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">symbolACount,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">symbolBCount,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">symbolCCount</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">An internal function that detects whether the TokenIterator is on a symbol line, which is up to three stretches of symbol tokens in a row.&nbsp; If it\'s on at least one symbol it returns true and sets the A, B, and C characters and counts.&nbsp; If there are no B or C stretches they will be set to null and zero.&nbsp; The start iterator will be left equal to end or after the symbol tokens.</div></div>",797:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype797\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private static bool</span> CountEdgeSymbols (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">LineIterator&nbsp;</td><td class=\"PName last\">line,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">leftSymbol,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">rightSymbol,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">leftSymbolCount,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">rightSymbolCount,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">symbolIsAloneOnLine</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">An internal function that detects whether the LineIterator has symbols on its left and/or right sides.&nbsp; The symbols must be no longer than three characters and be separated by whitespace from any other content on the line.&nbsp; If either edge has symbols it will return true along with what they are and how many.&nbsp; If neither do it will return false.&nbsp; The variables will be set to the null character and a zero count for any edge that doesn\'t have symbols.</div></div>",798:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype798\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private static bool</span> CountSymbols (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">end,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">symbol,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">count</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">An internal function that detects whether the TokenIterator is on a stretch of symbols, and if so, returns true along with what the symbol is and how many there are.&nbsp; It will leave the start iterator equal to end or at the first token after the stretch.</div></div>",799:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype799\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private static bool</span> ReverseCountSymbols (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">end,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">symbol,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">count</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">An internal function that detects whether the TokenIterator is one past a stretch of symbols, and if so, returns true along with what the symbol is and how many there are.&nbsp; It will leave the end iterator equal to start or at the first token of the stretch.</div></div>"});