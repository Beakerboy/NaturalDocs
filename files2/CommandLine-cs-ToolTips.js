NDContentPage.OnToolTipsLoaded({222:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype222\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Collections.</span>&#8203;StringToStringTable</div></div></div><div class=\"TTSummary\">A general lookup table for mapping one string to another.&nbsp; This is preferable to a Dictionary&lt;string, string&gt; class because</div></div>",3786:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3786\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.</span>&#8203;Path</div></div></div><div class=\"TTSummary\">A struct encapsulating a file path string.&nbsp; This is needed because Natural Docs needs to be able to handle all three path formats at once, not just the local format.&nbsp; Natural Docs on Windows may be reading a configuration file from Natural Docs on Linux and vice versa.</div></div>",4014:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype4014\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> AddAliases (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">parameter,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">params</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>[]&nbsp;</td><td class=\"PName last\">aliases</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Registers command line aliases, such as &quot;-i&quot; and &quot;--input&quot;.&nbsp; The first one is the one that will be returned by GetParameter().</div></div>",4016:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype4016\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> GetParameter (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">parameter,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">parameterAsEntered</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Attempts to return a command line parameter, like &quot;-i&quot;.&nbsp; Will return false if the current position is not on a parameter.</div></div>",4039:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype4039\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected string</span>[] segments</div><div class=\"TTSummary\">The original command line as an array of strings</div></div>",4040:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype4040\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected int</span> index</div><div class=\"TTSummary\">The current position as an index into segments.</div></div>"});