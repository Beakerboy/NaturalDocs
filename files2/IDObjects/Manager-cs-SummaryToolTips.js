NDSummary.OnToolTipsLoaded("File2:IDObjects/Manager.cs",{1493:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1493\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;IDObjects.</span>&#8203;Manager&#8203;<span class=\"TemplateSignature\">&lt;IDObjectType&gt;</span></div><div class=\"CPPostPrototypeLine\"><span class=\"SHKeyword\">where</span> IDObjectType: IDObjects.Base</div></div></div><div class=\"TTSummary\">A class for managing objects that have to be referenced either by a string ID or a unique numeric ID.&nbsp; This is a generic class.&nbsp; Set the type to be an object derived from IDObjects.Base.</div></div>",1496:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1496\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> Manager (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">KeySettings&nbsp;</td><td class=\"PName last\">keySettings,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">sparse</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Creates a new IDObject manager.</div></div>",1497:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1497\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> Add (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">IDObjectType&nbsp;</td><td class=\"PName last\">newObject</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Adds a new object to the manager.&nbsp; The objects Name must be set.&nbsp; If the object\'s ID is set, it will attempt to add it using that ID number and throw an exception if it\'s already taken.&nbsp; If it\'s not set, it will assign it the lowest available ID.&nbsp; For that reason you should add all objects with known IDs before adding any that need them assigned.</div></div>",1498:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1498\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> Remove (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">name</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Removes the object with the associated textual name.&nbsp; Returns whether it was present in the set.&nbsp; It does not throw an exception if it was not.&nbsp; After removal the associated ID will be available for assignment again.</div></div>",1499:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1499\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> Remove (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">id</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Removes the object with the associated numeric ID.&nbsp; Returns whether it was present in the set.&nbsp; It does not throw an exception if it was not.&nbsp; After removal the associated ID will be available for assignment again.</div></div>",1500:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1500\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> IDObjectType <span class=\"SHKeyword\">this</span> [</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">name</td></tr></table></td><td class=\"PAfterParameters\">] { <span class=\"SHKeyword\">get</span> }</td></tr></table></div><div class=\"TTSummary\">An index operator to retrieve the object with the associated textual name, or null if there isn\'t one.</div></div>",1501:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1501\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> IDObjectType <span class=\"SHKeyword\">this</span> [</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">id</td></tr></table></td><td class=\"PAfterParameters\">] { <span class=\"SHKeyword\">get</span> }</td></tr></table></div><div class=\"TTSummary\">An index operator to retrieve the object with the associated numeric ID, or null if there isn\'t one.</div></div>",1502:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1502\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> Contains (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">name</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether an object exists with the passed textual name.</div></div>",1503:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1503\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> Contains (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">id</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether an object exists with the passed numeric ID.</div></div>",1504:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1504\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> NumberSet GetUsedIDs ()</div><div class=\"TTSummary\">Returns a NumberSet of all the used IDs.&nbsp; The returned set is an independent copy, which means you can change it without affecting this object, and it\'s a snapshot that will not reflect future changes to this object.</div></div>",1505:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1505\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public void</span> Clear ()</div><div class=\"TTSummary\">Removes all objects, making the manager empty.</div></div>",1506:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1506\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected int</span> BinarySearch (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">id</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Searches objectsByID for the passed ID.&nbsp; If it finds it, the return value will be zero or positive representing the index of the item.&nbsp; If it doesn\'t, the return value will be the bitwise complement of the index the item should be inserted at.&nbsp; This is consistent with the system used by System.Collections.Generic.List.BinarySearch().</div></div>",1508:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype1508\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public int</span> Count { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The number of objects being managed.</div></div>",1510:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1510\" class=\"NDPrototype NoParameterForm\">System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()</div></div>",1513:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype1513\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected internal</span> IDObjects.NumberSet usedIDs</div><div class=\"TTSummary\">The set of used identifiers.</div></div>",1514:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype1514\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> List&lt;IDObjectType&gt; objectsByID</div><div class=\"TTSummary\">An array of objects.&nbsp; If sparse is false, the index location corresponds to its numeric ID.&nbsp; If sparse is true, the objects will be in ID order but you have to use a binary search to find the ID you want.</div></div>",1515:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype1515\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> StringTable&lt;IDObjectType&gt; objectsByName</div><div class=\"TTSummary\">A StringTable translating textual names to their objects.</div></div>",1516:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype1516\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected bool</span> sparse</div><div class=\"TTSummary\">Whether objectsByID is sparse or not.</div></div>"});