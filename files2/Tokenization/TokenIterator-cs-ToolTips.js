NDContentPage.OnToolTipsLoaded({3263:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3263\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> FundamentalType : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">The type of token it is on the most basic level.</div></div>",3264:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">Returned when the token iterator is out of bounds.</div></div>",3269:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3269\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> CommentParsingType : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">The type of token it is as is relevant to comment parsing.</div></div>",3270:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">Returned when the token iterator is out of bounds or if a token hasn\'t been assigned one of these values yet.</div></div>",3279:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3279\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> SyntaxHighlightingType : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">The type of token it is as is relevant to prototype parsing.</div></div>",3280:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">Returned when the token is out of bounds or one of these values hasn\'t been assigned to it yet.</div></div>",3287:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3287\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> PrototypeParsingType : <span class=\"SHKeyword\">byte</span></div></div>",3288:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">Returned when the token is out of bounds or one of these values hasn\'t been assigned to it yet.</div></div>",3309:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3309\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> ClassPrototypeParsingType : <span class=\"SHKeyword\">byte</span></div></div>",3323:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3323\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;Tokenizer</div></div></div><div class=\"TTSummary\">A class for dividing a block of text into easily navigable tokens.&nbsp; See FundamentalType for a description of how they are divided up by default.</div></div>",3359:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3359\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> RawText { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The raw, unadulterated input string.</div></div>",3383:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3383\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;SimpleTokenIterator</div></div></div><div class=\"TTSummary\">An iterator that walks through an untokenized string in a similar manner to TokenIterator.&nbsp; It figures out tokens on the fly and is useful for comparing TokenIterators to simple strings where having a Tokenizer would be overkill.&nbsp; However, it contains only a small subset of the functionality in TokenIterator and isn\'t efficient for serious parsing.</div></div>",3415:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3415\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;TokenIterator</div></div></div><div class=\"TTSummary\">An iterator for efficiently walking through the tokens in Tokenizer while keeping track of the line number and offset into the raw text.</div></div>",3425:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3425\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public int</span> TokensInCharacters (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">characterCount</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the number of tokens between the current position and the passed number of characters.&nbsp; If advancing by the character count would not land on a token boundary this returns -1.</div></div>",3426:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3426\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public int</span> TokensInPreviousCharacters (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">characterCount</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the number of tokens between the current position and the passed number of characters before it.&nbsp; If going backwards by the character count would not land on a token boundary this returns -1.</div></div>",3427:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3427\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> MatchesToken (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">text,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">ignoreCase&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">false</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the passed string matches the current token.&nbsp; The string must match the entire token, so &quot;some&quot; won\'t match &quot;something&quot;.&nbsp; Returns false if the iterator is out of bounds.</div></div>",3431:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3431\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> MatchesAcrossTokens (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">text,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">ignoreCase&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">false</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the passed string matches the tokens at the current position.&nbsp; The string comparison can span multiple tokens, which allows you to test against things like &quot;//&quot; which would be two tokens.&nbsp; However, the string must still match complete tokens so &quot;// some&quot; won\'t match &quot;// something&quot;.&nbsp; Returns false if the iterator is out of bounds.</div></div>",3435:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3435\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> AppendTokenTo (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">System.Text.</td><td class=\"PType\">StringBuilder&nbsp;</td><td class=\"PName last\">output</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Appends the token to the passed StringBuilder.&nbsp; This is more efficient than appending the result of String because it copies directly from the source without creating an intermediate string.</div></div>",3443:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3443\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> String { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Returns the token as a string, or an empty string if it\'s out of bounds.&nbsp; Note that this allocates memory and creates a copy of the string.&nbsp; Whenever possible use functions like MatchesToken() and AppendTokenTo() to work directly on the original memory, or use RawTextIndex and RawTextLength with Tokenizer.RawText to access it yourself.</div></div>",3445:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3445\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> FundamentalType FundamentalType { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The FundamentalType of the current token, or FundamentalType.Null if the iterator is out of bounds.&nbsp; It cannot be changed.</div></div>",3446:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3446\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> CommentParsingType CommentParsingType { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">The CommentParsingType of the current token, or CommentParsingType.Null if it hasn\'t been set or the iterator is out of bounds.</div></div>",3447:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3447\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> SyntaxHighlightingType SyntaxHighlightingType { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">The SyntaxHighlightingType of the current token, or SyntaxHighlightingType.Null if it hasn\'t been set or the iterator is out of bounds.</div></div>",3448:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3448\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> PrototypeParsingType PrototypeParsingType { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">The PrototypeParsingType of the current token, or PrototypeParsingType.Null if it hasn\'t been set or the iterator is out of bounds.</div></div>",3449:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3449\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> ClassPrototypeParsingType ClassPrototypeParsingType { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">The ClassPrototypeParsingType of the current token, or PrototypeParsingType.Null if it hasn\'t been set or the iterator is out of bounds.</div></div>",3453:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3453\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public int</span> RawTextIndex { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The offset of the current token into Tokenizer.RawText.&nbsp; Will be zero if it went past the beginning, or the index one past the last character if it went past the end.</div></div>",3454:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3454\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public int</span> RawTextLength { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The length of the current token in characters, or zero if the iterator is out of bounds.</div></div>",3457:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3457\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> Tokenizer Tokenizer { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The Tokenizer associated with this iterator.</div></div>",3473:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3473\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> PreviousPastWhitespaceMode : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">The method to use when using &lt;PreviousPastWhitespace()&gt;.</div></div>",3474:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">The iterator is treated as an ending bounds, a limit to another iterator.</div></div>",3475:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">The iterator is treated as an independent iterator.</div></div>",3768:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3768\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.</span>&#8203;Position</div></div></div><div class=\"TTSummary\">A position within a source file, which encapsulates both a line number and character number.</div></div>"});