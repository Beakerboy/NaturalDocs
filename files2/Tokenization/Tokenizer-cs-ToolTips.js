NDContentPage.OnToolTipsLoaded({3263:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3263\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> FundamentalType : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">The type of token it is on the most basic level.</div></div>",3265:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">A single line break in CR, LF, or CR/LF format.</div></div>",3269:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3269\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> CommentParsingType : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">The type of token it is as is relevant to comment parsing.</div></div>",3279:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3279\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> SyntaxHighlightingType : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">The type of token it is as is relevant to prototype parsing.</div></div>",3287:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3287\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> PrototypeParsingType : <span class=\"SHKeyword\">byte</span></div></div>",3309:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3309\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> ClassPrototypeParsingType : <span class=\"SHKeyword\">byte</span></div></div>",3323:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3323\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;Tokenizer</div></div></div><div class=\"TTSummary\">A class for dividing a block of text into easily navigable tokens.&nbsp; See FundamentalType for a description of how they are divided up by default.</div></div>",3328:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3328\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public string</span> TextBetween (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">end</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the text between the two passed iterators.&nbsp; If you plan to add it to a StringBuilder, it is more efficient to call AppendTextBetweenTo() instead because that won\'t require the creation of an intermediate string.</div></div>",3329:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3329\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> AppendTextBetweenTo (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">end,</td></tr><tr><td class=\"PModifierQualifier first\">System.Text.</td><td class=\"PType\">StringBuilder&nbsp;</td><td class=\"PName last\">output</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Appends the text between the two passed iterators to the passed StringBuilder.&nbsp; This is more effecient than appending the result from TextBetween() because it transfers directly from the raw text to the StringBuilder without creating an intermediate string.</div></div>",3370:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3370\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected internal</span> IList&lt;Line&gt; Lines { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The list of Lines.</div></div>",3372:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3372\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected string</span> rawText</div><div class=\"TTSummary\">The raw, unadulterated input text.</div></div>",3373:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3373\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> List&lt;<span class=\"SHKeyword\">byte</span>&gt; tokenLengths</div><div class=\"TTSummary\">The list of token lengths generated for rawText based on FundamentalTypes.</div></div>",3415:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3415\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;TokenIterator</div></div></div><div class=\"TTSummary\">An iterator for efficiently walking through the tokens in Tokenizer while keeping track of the line number and offset into the raw text.</div></div>",3481:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3481\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;Line</div></div></div><div class=\"TTSummary\">A struct representing a line in a string.&nbsp; Managed by Tokenizer.</div></div>",3485:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3485\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;LineIterator</div></div></div><div class=\"TTSummary\">An iterator to go through a Tokenizer line by line instead of token by token.</div></div>"});