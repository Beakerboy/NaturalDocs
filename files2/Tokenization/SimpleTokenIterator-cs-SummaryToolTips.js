NDSummary.OnToolTipsLoaded("File2:Tokenization/SimpleTokenIterator.cs",{3383:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3383\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;SimpleTokenIterator</div></div></div><div class=\"TTSummary\">An iterator that walks through an untokenized string in a similar manner to TokenIterator.&nbsp; It figures out tokens on the fly and is useful for comparing TokenIterators to simple strings where having a Tokenizer would be overkill.&nbsp; However, it contains only a small subset of the functionality in TokenIterator and isn\'t efficient for serious parsing.</div></div>",3385:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3385\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> SimpleTokenIterator (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">text,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName\">offset&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHNumber\">0</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3386:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3386\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> Next (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName\">count&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHNumber\">1</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Moves forward the passed number of tokens, returning false if we\'re past the last token.</div></div>",3387:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3387\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public void</span> NextPastWhitespace ()</div><div class=\"TTSummary\">Moves forward until past all whitespace tokens.</div></div>",3388:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3388\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> NextPastWhitespace (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">SimpleTokenIterator&nbsp;</td><td class=\"PName last\">limit</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Moves forward until past all whitespace tokens or the limit is reached.</div></div>",3389:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3389\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> MatchesToken (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">text,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">ignoreCase&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">false</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the passed string matches the current token.&nbsp; The string must match the entire token, so &quot;some&quot; won\'t match &quot;something&quot;.&nbsp; Returns false if the iterator is out of bounds.</div></div>",3390:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3390\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> MatchesToken (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName\">other,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">ignoreCase&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">false</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the current token matches the one at the passed iterator.&nbsp; Returns false if either iterator is out of bounds.</div></div>",3391:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3391\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> MatchesToken (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">SimpleTokenIterator&nbsp;</td><td class=\"PName\">other,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">ignoreCase&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">false</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the current token matches the one at the passed iterator.&nbsp; Returns false if either iterator is out of bounds.</div></div>",3393:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3393\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private void</span> GetTokenLength ()</div><div class=\"TTSummary\">Generates tokenLength from rawText and rawTextIndex.</div></div>",3395:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3395\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> String { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Returns the token as a string, or an empty string if it\'s out of bounds.&nbsp; Note that this allocates memory and creates a copy of the string.&nbsp; Whenever possible use functions like MatchesToken() to work directly on the original memory, or use RawTextIndex and RawTextLength with RawText to access it yourself.</div></div>",3396:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3396\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public char</span> Character { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The first character of the token, or null if it\'s out of bounds.&nbsp; This is useful for symbol tokens which will always be only one character long.</div></div>",3397:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3397\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> FundamentalType FundamentalType { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The FundamentalType of the current token, or FundamentalType.Null if the iterator is out of bounds.&nbsp; It cannot be changed.</div></div>",3398:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3398\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> RawText { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The string that this iterator is navigating through.</div></div>",3399:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3399\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public int</span> RawTextIndex { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The offset of the current token into RawText.&nbsp; Will be zero if it went past the beginning, or the index one past the last character if it went past the end.</div></div>",3400:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3400\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public int</span> RawTextLength { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The length of the current token in characters, or zero if the iterator is out of bounds.</div></div>",3401:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3401\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> IsInBounds { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Whether the iterator is not past the beginning or end of the list of tokens.</div></div>",3403:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3403\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public override bool</span> Equals (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">other</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3404:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3404\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public override int</span> GetHashCode ()</div></div>",3405:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3405\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>== (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">SimpleTokenIterator&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\">SimpleTokenIterator&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3406:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3406\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>!= (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">SimpleTokenIterator&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\">SimpleTokenIterator&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3407:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3407\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>&gt; (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">SimpleTokenIterator&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\">SimpleTokenIterator&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3408:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3408\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>&gt;= (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">SimpleTokenIterator&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\">SimpleTokenIterator&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3409:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3409\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>&lt; (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">SimpleTokenIterator&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\">SimpleTokenIterator&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3410:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3410\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>&lt;= (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">SimpleTokenIterator&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\">SimpleTokenIterator&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3412:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3412\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private string</span> rawText</div><div class=\"TTSummary\">The string associated with this iterator.</div></div>",3413:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3413\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private int</span> rawTextIndex</div><div class=\"TTSummary\">The current index into rawText.</div></div>",3414:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3414\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private int</span> tokenLength</div><div class=\"TTSummary\">The length of the current token.</div></div>"});