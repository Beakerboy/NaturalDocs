NDSummary.OnToolTipsLoaded("File2:Languages/Parsers/CSharp.cs",{1694:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1694\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Languages.&#8203;Parsers.</span>&#8203;CSharp</div></div></div><div class=\"TTSummary\">Full language support parser for C#.</div></div>",1696:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype1696\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> AttributeTarget : <span class=\"SHKeyword\">byte</span></div></div>",1701:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1701\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> CSharp (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">Languages.</td><td class=\"PType\">Manager&nbsp;</td><td class=\"PName last\">manager</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",1702:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1702\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public override</span> ParsedPrototype ParsePrototype (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">stringPrototype,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">commentTypeID</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Converts a raw text prototype into a ParsedPrototype.</div></div>",1703:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1703\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">override public</span> ParsedClassPrototype ParseClassPrototype (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">stringPrototype,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">commentTypeID</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Converts a raw text prototype into a ParsedClassPrototype.&nbsp; Will return null if it is not an appropriate prototype.</div></div>",1704:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1704\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">override public</span> List&lt;Element&gt; GetCodeElements (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">source</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",1705:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1705\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> GetCodeElements (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">List&lt;Element&gt;&nbsp;</td><td class=\"PName\">elements,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">SymbolString&nbsp;</td><td class=\"PName\">scope,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName\">untilAfterChar&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHString\">\'\\0\'</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Adds code elements to the list until it reaches the end of the file or optionally passes a specific character.&nbsp; This will recursively go into nested classes and namespaces.&nbsp; The stop character must appear on its own and not inside a block, string, or comment, so to use \'}\' you must start past the opening brace.&nbsp; The iterator will be left past the stop character or at the end of the file.</div></div>",1706:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1706\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">override public void</span> SyntaxHighlight (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">source</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",1707:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1707\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">override public bool</span> IsBuiltInType (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">type</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the type string is a built-in type such as &quot;int&quot; as opposed to a user-defined type.</div></div>",1709:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1709\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipUsingStatement (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">List&lt;Element&gt;&nbsp;</td><td class=\"PName\">elements&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">SymbolString&nbsp;</td><td class=\"PName\">scope&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">default</span>(SymbolString)</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on a using statement, moves it past it and returns true.&nbsp; If the mode is set to &lt;ParseMode.CreateElements&gt; it will add it to the most recent ParentElement.</div></div>",1710:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1710\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipNamespace (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">List&lt;Element&gt;&nbsp;</td><td class=\"PName\">elements&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">SymbolString&nbsp;</td><td class=\"PName\">scope&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">default</span>(SymbolString)</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on a namespace element, moves it past it and returns true.&nbsp; If the mode is set to &lt;ParseMode.CreateElements&gt; it will add it to the list of Elements.</div></div>",1711:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1711\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipClass (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">List&lt;Element&gt;&nbsp;</td><td class=\"PName\">elements&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">SymbolString&nbsp;</td><td class=\"PName\">scope&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">default</span>(SymbolString)</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on a class, struct, or interface element, moves it past it and returns true.&nbsp; If the mode is set to &lt;ParseMode.CreateElements&gt; it will add it to the list of Elements.</div></div>",1712:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1712\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipFunction (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">List&lt;Element&gt;&nbsp;</td><td class=\"PName\">elements&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">SymbolString&nbsp;</td><td class=\"PName\">scope&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">default</span>(SymbolString)</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on a function, delegate, or operator other than a conversion or indexer, moves it past it and returns true.&nbsp; If the mode is set to &lt;ParseMode.CreateElements&gt; it will add it to the list of Elements.</div></div>",1713:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1713\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipConstructor (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">List&lt;Element&gt;&nbsp;</td><td class=\"PName\">elements&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">SymbolString&nbsp;</td><td class=\"PName\">scope&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">default</span>(SymbolString)</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on a constructor or destructor, moves it past it and returns true.&nbsp; If the mode is set to &lt;ParseMode.CreateElements&gt; it will add it to the list of Elements.</div></div>",1714:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1714\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipConversionOperator (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">List&lt;Element&gt;&nbsp;</td><td class=\"PName\">elements&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">SymbolString&nbsp;</td><td class=\"PName\">scope&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">default</span>(SymbolString)</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on a conversion operator, moves it past it and returns true.&nbsp; If the mode is set to &lt;ParseMode.CreateElements&gt; it will add it to the list of Elements.</div></div>",1715:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1715\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipVariable (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">List&lt;Element&gt;&nbsp;</td><td class=\"PName\">elements&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">SymbolString&nbsp;</td><td class=\"PName\">scope&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">default</span>(SymbolString)</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on a variable, constant, or event, moves it past it and returns true.&nbsp; If the mode is set to &lt;ParseMode.CreateElements&gt; it will add it to the list of Elements.</div></div>",1716:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1716\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipProperty (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">List&lt;Element&gt;&nbsp;</td><td class=\"PName\">elements&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">SymbolString&nbsp;</td><td class=\"PName\">scope&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">default</span>(SymbolString)</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on a property, indexer, or event declared like a property, moves it past it and returns true.&nbsp; If the mode is set to &lt;ParseMode.CreateElements&gt; it will add it to the list of Elements.</div></div>",1717:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1717\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipEnum (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">List&lt;Element&gt;&nbsp;</td><td class=\"PName\">elements&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">SymbolString&nbsp;</td><td class=\"PName\">scope&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">default</span>(SymbolString)</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on an enum, moves it past it and returns true.&nbsp; If the mode is set to &lt;ParseMode.CreateElements&gt; it will add it to the list of Elements.</div></div>",1719:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1719\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipParameters (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName\">closingSymbol&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHString\">\')\'</span>,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Tries to move the iterator past a comma-separated list of parameters ending at the closing symbol, which defaults to a closing parenthesis.</div></div>",1720:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1720\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipParameter (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName\">closingSymbol&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHString\">\')\'</span>,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Tries to move the iterator past a parameter, such as &quot;int x&quot; or &quot;IList&lt;int&gt; y = null&quot;.&nbsp; The parameter ends at a comma or the closing symbol, which defaults to a closing parenthesis.</div></div>",1721:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1721\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipType (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Tries to move the iterator past a type, such as &quot;int&quot;, &quot;System.Collections.Generic.List&lt;int&gt;&quot;, or &quot;int[]&quot;.&nbsp; This accepts &quot;void&quot; as a valid type.</div></div>",1722:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1722\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipIdentifier (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">identifier,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">PrototypeParsingType&nbsp;</td><td class=\"PName\">prototypeParsingType&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">PrototypeParsingType.Name</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Attempts to skip past and retrieve an identifier, such as &quot;X.Y.Z&quot;.&nbsp; Use TryToSkipUnqualifiedIdentifier() if you only want to retrieve a single segment.</div></div>",1723:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1723\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipIdentifier (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">PrototypeParsingType&nbsp;</td><td class=\"PName\">prototypeParsingType&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">PrototypeParsingType.Name</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Tries to move the iterator past a qualified identifier, such as &quot;X.Y.Z&quot;.&nbsp; Use TryToSkipUnqualifiedIdentifier() if you only want to skip a single segment.</div></div>",1724:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1724\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipUnqualifiedIdentifier (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Tries to move the iterator past a single unqualified identifier, which means only &quot;X&quot; in &quot;X.Y.Z&quot;.</div></div>",1725:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1725\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipTemplateSignature (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">isType&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">true</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Tries to move the iterator past a template signature, such as &quot;&lt;int&gt;&quot; in &quot;List&lt;int&gt;&quot;.&nbsp; It can handle nested templates.&nbsp; If isType is false, it will move past the signature in template declarations, such as &quot;&lt;X, in Y&gt;&quot; in &quot;class Template&lt;X, in Y&gt;&quot;.</div></div>",1726:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1726\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipWhereClause (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Tries to move the iterator past a where clause, such as &quot;where struct, new()&quot;.&nbsp; This only covers a single where clause, so you may have to call this in a loop to get them all.</div></div>",1727:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1727\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipAttributes (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">AttributeTarget&nbsp;</td><td class=\"PName\">type&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">AttributeTarget.Any,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">PrototypeParsingType&nbsp;</td><td class=\"PName\">prototypeParsingType&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">PrototypeParsingType.TypeModifier</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Tries to move the iterator past a group of attributes which may be separated by whitespace.</div></div>",1728:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1728\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipAttribute (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">AttributeTarget&nbsp;</td><td class=\"PName\">type&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">AttributeTarget.Any,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">PrototypeParsingType&nbsp;</td><td class=\"PName\">prototypeParsingType&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">PrototypeParsingType.TypeModifier</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Tries to move the iterator past a single attribute.&nbsp; Note that there may be more than one attribute in a row, so use TryToSkipAttributes() if you need to move past all of them.</div></div>",1729:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1729\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipModifiers (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Attempts to skip one or more modifiers such as &quot;public&quot; or &quot;static&quot;.</div></div>",1730:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1730\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipModifiers (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">AccessLevel&nbsp;</td><td class=\"PName\">accessLevel,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Attempts to skip one or more modifiers such as &quot;public&quot; or &quot;static&quot;.&nbsp; If they contained access modifiers it will return it, or AccessLevel.Unknown if not.</div></div>",1732:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1732\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> GenericSkip (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">angleBracketsAsBlocks&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">false</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Advances the iterator one place through general code.</div></div>",1733:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1733\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> GenericSkipUntilAfter (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName\">symbol,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">angleBracketsAsBlocks&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">false</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Advances the iterator via GenericSkip() until a specific symbol is reached and passed.</div></div>",1734:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1734\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> SkipRestOfStatement (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">angleBracketsAsBlocks&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">false</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Advances the iterator via GenericSkip() until after the end of the current statement, which is defined as a semicolon or a brace group.&nbsp; Of course, either of those appearing inside parenthesis, a nested brace group, etc. don\'t count.</div></div>",1735:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1735\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipPreprocessingDirective (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",1736:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1736\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipWhitespace (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Includes comments.</div></div>",1737:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1737\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">new protected bool</span> TryToSkipComment (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",1738:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1738\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">new protected bool</span> TryToSkipLineComment (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",1739:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1739\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">new protected bool</span> TryToSkipBlockComment (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",1740:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1740\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">new protected bool</span> TryToSkipString (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">This covers string, @string, and character constants.</div></div>",1742:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype1742\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">static protected</span> StringSet Keywords</div></div>",1743:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype1743\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">static protected string</span>[] NonAccessModifiers</div><div class=\"TTSummary\">A list of all possible modifiers (such as &quot;static&quot;) excluding the access properties (such as &quot;public&quot;.)&nbsp; Not every modifier can apply to every code element (such as &quot;sealed&quot; not being revelant for constants) but it is okay for the parser to be over tolerant.</div></div>",1744:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype1744\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">static protected</span> StringSet BuiltInTypes</div></div>"});