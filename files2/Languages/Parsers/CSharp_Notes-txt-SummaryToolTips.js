NDSummary.OnToolTipsLoaded("File2:Languages/Parsers/CSharp_Notes.txt",{1617:"<div class=\"NDToolTip TSection LTextFile\"><div class=\"TTSummary\">This parser is built from version 4.0 of the C# language specification.&nbsp; All references below such as [2.3.1] refer to headings in this document.</div></div>",1618:"<div class=\"NDToolTip TGroup LTextFile\"><div class=\"TTSummary\">Language features that are supported but aren\'t obvious and so must be kept in mind when working on the parser.</div></div>",1619:"<div class=\"NDToolTip TInformation LTextFile\"><div class=\"TTSummary\">Identifiers may be prefixed with the @ symbol, which allows the use of keywords as identifiers [2.4.2].&nbsp; Thus &quot;class&quot; should be highlighted as a keyword but &quot;@class&quot; should not.</div></div>",1620:"<div class=\"NDToolTip TInformation LTextFile\"><div class=\"TTSummary\">When a class marked &quot;internal&quot; has a member marked &quot;public&quot;, the member is functionally &quot;internal&quot; for all practical purposes.&nbsp; See [3.5.2] for the full rules regarding these types of interactions.</div></div>",1621:"<div class=\"NDToolTip TInformation LTextFile\"><div class=\"TTSummary\">Unsafe code extensions are documented separately in [18] and [B.3], so looking at the syntax diagrams without them will give an incomplete picture.&nbsp; For example, void* is a valid type that can be used anywhere even though void would only be used in function return values otherwise.</div></div>",1622:"<div class=\"NDToolTip TGroup LTextFile\"><div class=\"TTSummary\">These language elements are not supported by the parser.</div></div>",1623:"<div class=\"NDToolTip TInformation LTextFile\"><div class=\"TTSummary\">The parser supports the standard line break formats:</div></div>",1624:"<div class=\"NDToolTip TInformation LTextFile\"><div class=\"TTSummary\">The parser supports the following whitespace characters:</div></div>",1625:"<div class=\"NDToolTip TInformation LTextFile\"><div class=\"TTSummary\">The parser supports Unicode escape sequences (&quot;\\u0066&quot;) in string and char literals.&nbsp; C# also supports them in identifiers [2.4.1] so that this:</div></div>",1626:"<div class=\"NDToolTip TInformation LTextFile\"><div class=\"TTSummary\">The @ character can precede an identifier to allow keywords to be used, such as &quot;int @class = 6&quot; [2.4.2].&nbsp; This is supported.&nbsp; However, the @ character is not actually part of the name, so it can also be used with non-keywords and &quot;@x&quot; and &quot;x&quot; are considered the same identifier.&nbsp; This is not supported.</div></div>",1627:"<div class=\"NDToolTip TInformation LTextFile\"><div class=\"TTSummary\">Excluding the @, C# identifiers can start with an underscore or any character in Unicode classes Lu (Letter, Uppercase) Ll (Letter, Lowercase) Lt, Lm, Lo, or Nl.&nbsp; Subsequent characters can also be in the character classes Mn, Mc, Nd (Number, Decimal Digit) Pc, or Cf [2.4.2].</div></div>",1628:"<div class=\"NDToolTip TInformation LTextFile\"><div class=\"TTSummary\">In C# &quot;get&quot;, &quot;set&quot;, and &quot;var&quot; are not standard keywords [2.4.3] and thus can be used as identifiers.&nbsp; The parser will always highlight them as keywords.</div></div>",1629:"<div class=\"NDToolTip TInformation LTextFile\"><div class=\"TTSummary\">Properties can have access keywords like &quot;public&quot; applied to itself as a whole and also specifically to get and set.&nbsp; While the access keywords applied to get and set will appear in the prototype, Natural Docs will otherwise only use the overall access level of the property.</div></div>"});