NDSummary.OnToolTipsLoaded("File2:Thread.cs",{3715:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3715\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.</span>&#8203;Thread</div></div></div><div class=\"TTSummary\">A base class for all engine threads.</div></div>",3717:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3717\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> Thread ()</div></div>",3718:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3718\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public void</span> Start ()</div><div class=\"TTSummary\">Starts the thread, just like System.Threading.Thread.Start().&nbsp; If the thread was previously cancelled, it clears the cancelled flag and restarts it.&nbsp; <b>Do not override this function.</b>&nbsp; You need to override &lt;Run()&gt; instead.</div></div>",3719:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3719\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public void</span> Join ()</div><div class=\"TTSummary\">The calling thread waits for this thread to join, just like System.Threading.Join().&nbsp; Is safe to call if the thread was never started.</div></div>",3720:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3720\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public void</span> ThrowExceptions ()</div><div class=\"TTSummary\">If the thread terminated with an exception, throw it.&nbsp; Otherwise it does nothing.&nbsp; This should only be called by the parent thread.</div></div>",3722:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3722\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> CancellableTask Task { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div>",3723:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3723\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> CancelDelegate CancelDelegate { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">The function that determines whether the thread should be cancelled.&nbsp; The Task will call this periodically to see if it should stop, and if so will do so gracefully.&nbsp; As such it does not immediately halt the thread\'s execution and depends on the Task honoring it.</div></div>",3724:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3724\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> Name { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">The thread name.&nbsp; Can only be set by the constructor.</div></div>",3725:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3725\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> ThreadPriority Priority { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div>",3726:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3726\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> Engine.Exceptions.Thread Exception { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The exception the thread terminated on, or null if none.</div></div>",3728:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3728\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private void</span> InternalStart ()</div><div class=\"TTSummary\">The function that\'s mapped as the starting function for thread.&nbsp; This executes task and traps exceptions.</div></div>",3730:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3730\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> System.Threading.Thread thread</div><div class=\"TTSummary\">The thread this class is wrapping.</div></div>",3731:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3731\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> CancellableTask task</div><div class=\"TTSummary\">The task being run by the thread.</div></div>",3732:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3732\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> CancelDelegate cancelDelegate</div><div class=\"TTSummary\">The delegate that determines whether the task should be cancelled.</div></div>",3733:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3733\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> Engine.Exceptions.Thread exception</div><div class=\"TTSummary\">If the thread terminated because of an exception it will be stored here.</div></div>"});