NDContentPage.OnToolTipsLoaded({226:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype226\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Collections.</span>&#8203;StringTable&#8203;<span class=\"TemplateSignature\">&lt;ObjectType&gt;</span></div></div></div><div class=\"TTSummary\">A generic lookup table for mapping strings to other objects.&nbsp; This is preferable to a Dictionary&lt;string, object&gt; class because:</div></div>",241:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype241\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Collections.</span>&#8203;StringSet</div></div></div><div class=\"TTSummary\">A general lookup table for tracking the existence of strings in a set.&nbsp; This is preferable to a HashSet class because</div></div>",282:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype282\" class=\"NDPrototype NoParameterForm\"><div class=\"PPrePrototypeLine\"><span class=\"SHMetadata\">[Flags]</span></div><span class=\"SHKeyword\">public enum</span> KeySettings : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">The way to handle keys in collections like StringSet.&nbsp; These are flags and may be combined.</div></div>",338:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype338\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;CommentTypes.</span>&#8203;Tag</div></div></div><div class=\"TTSummary\">A class encompassing a comment type tag.</div></div>",373:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype373\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> Start (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">Errors.</td><td class=\"PType\">ErrorList&nbsp;</td><td class=\"PName last\">errorList</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Loads and combines the two versions of Comments.txt, returning whether it was successful.&nbsp; If there were any errors they will be added to errorList.</div></div>",374:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype374\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private bool</span> Start_CreateType (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">ConfigFileCommentType&nbsp;</td><td class=\"PName last\">configFileCommentType,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">Path&nbsp;</td><td class=\"PName last\">sourceFile,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">isSystemFile,</td></tr><tr><td class=\"PModifierQualifier first\">Errors.</td><td class=\"PType\">ErrorList&nbsp;</td><td class=\"PName last\">errorList</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">A helper function that is used only by Start() to create an entry in commentTypes for a ConfigFileCommentType.&nbsp; Does not set any properties.&nbsp; Returns whether it was able to do so without any errors.</div></div>",387:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype387\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> IDObjects.Manager&lt;CommentType&gt; commentTypes</div><div class=\"TTSummary\">Manages all the CommentTypes by their case-insensitive name or ID number.</div></div>",389:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype389\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> StringTable&lt;CommentType&gt; singularKeywords</div><div class=\"TTSummary\">A StringTable mapping the singular keywords to the CommentTypes they represent.</div></div>",390:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype390\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> StringTable&lt;CommentType&gt; pluralKeywords</div><div class=\"TTSummary\">A StringTable mapping the plural keywords to the CommentTypess they represent.</div></div>",392:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype392\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;CommentTypes.</span>&#8203;ConfigFileCommentType</div></div></div><div class=\"TTSummary\">A class encapsulating information about a comment type as parsed from a ConfigFile.&nbsp; This differs from CommentType in that its meant to represent how its entry appears in the config file rather than the final combined settings.&nbsp; For example, any field can be null if it\'s not defined.</div></div>",434:"<div class=\"NDToolTip TFile LCSharp\"><div class=\"TTSummary\">The configuration file that defines or overrides the comment type definitions for Natural Docs.&nbsp; One version sits in Natural Docs\' configuration folder, and another in the project configuration folder to add comment types or override their behavior.</div></div>",505:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype505\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;CommentTypes.</span>&#8203;CommentType</div></div></div><div class=\"TTSummary\">A class encapsulating information about a comment type.&nbsp; This differs from ConfigFileCommentType in that its meant to represent the final combined settings of a comment type rather than its entry in a config file.&nbsp; For example, all fields are initialized to default values rather than null or Default, and it doesn\'t store the type\'s keywords.</div></div>",1160:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1160\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Errors.</span>&#8203;ErrorList</div></div></div><div class=\"TTSummary\">A list of Error objects.</div></div>",1200:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1200\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Config.</span>&#8203;Manager</div></div></div><div class=\"TTSummary\">A class to manage the engine\'s configuration.</div></div>",1493:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1493\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;IDObjects.</span>&#8203;Manager&#8203;<span class=\"TemplateSignature\">&lt;IDObjectType&gt;</span></div><div class=\"CPPostPrototypeLine\"><span class=\"SHKeyword\">where</span> IDObjectType: IDObjects.Base</div></div></div><div class=\"TTSummary\">A class for managing objects that have to be referenced either by a string ID or a unique numeric ID.&nbsp; This is a generic class.&nbsp; Set the type to be an object derived from IDObjects.Base.</div></div>",3786:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3786\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.</span>&#8203;Path</div></div></div><div class=\"TTSummary\">A struct encapsulating a file path string.&nbsp; This is needed because Natural Docs needs to be able to handle all three path formats at once, not just the local format.&nbsp; Natural Docs on Windows may be reading a configuration file from Natural Docs on Linux and vice versa.</div></div>",3865:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3865\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public abstract</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.</span>&#8203;Module</div></div></div><div class=\"TTSummary\">A base class for a core part of Engine.Instance.</div></div>",3962:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3962\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.</span>&#8203;Instance</div></div></div><div class=\"TTSummary\">A class for managing the overall Natural Docs engine.</div></div>",3971:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3971\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> Start (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">Errors.</td><td class=\"PType\">ErrorList&nbsp;</td><td class=\"PName last\">errors,</td></tr><tr><td class=\"PModifierQualifier first\">Config.</td><td class=\"PType\">ProjectConfig&nbsp;</td><td class=\"PName last\">commandLineConfig</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Attempts to start the engine instance.&nbsp; Returns whether it was successful, and if it wasn\'t, puts any errors that prevented it on the list.&nbsp; If you wish to try to start it again, call Dispose() and &lt;Create()&gt; first.</div></div>"});