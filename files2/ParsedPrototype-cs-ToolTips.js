NDContentPage.OnToolTipsLoaded({1935:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype1935\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> AccessLevel : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">An enum representing a member access level.</div></div>",3287:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3287\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> PrototypeParsingType : <span class=\"SHKeyword\">byte</span></div></div>",3291:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">The start of a parameter list, such as an opening parenthesis.</div></div>",3292:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">The end of a parameter list, such as a closing parenthesis.</div></div>",3293:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">A separator between parameters, such as a comma.</div></div>",3296:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">The type excluding all modifiers and qualifiers, such as &quot;int&quot; in &quot;unsigned int&quot; or &quot;Class&quot; in &quot;PkgA.PkgB.Class&quot;.</div></div>",3300:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">In languages that use them, the symbol separating a variable name from its type, such as &quot;:&quot; in &quot;x: int&quot;.&nbsp; In languages that simply use a space this type won\'t appear.</div></div>",3303:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">The name of the parameter or the code element being defined by the prototype.</div></div>",3323:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3323\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;Tokenizer</div></div></div><div class=\"TTSummary\">A class for dividing a block of text into easily navigable tokens.&nbsp; See FundamentalType for a description of how they are divided up by default.</div></div>",3415:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3415\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;TokenIterator</div></div></div><div class=\"TTSummary\">An iterator for efficiently walking through the tokens in Tokenizer while keeping track of the line number and offset into the raw text.</div></div>",3822:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3822\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> ParameterStyle : <span class=\"SHKeyword\">byte</span></div></div>",3825:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3825\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> SectionType : <span class=\"SHKeyword\">byte</span></div></div>",3837:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3837\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> GetParameter (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">parameterNumber,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">end</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the bounds of a numbered parameter.&nbsp; Numbers start at zero.&nbsp; It will return false if one does not exist at that number.</div></div>",3838:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3838\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> GetParameterName (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">index,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">end</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the bounds of the name of the passed parameter, or false if it couldn\'t find it.</div></div>",3849:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3849\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> Tokenizer Tokenizer { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The tokenized prototype.</div></div>",3851:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3851\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public int</span> NumberOfParameters { <span class=\"SHKeyword\">get</span> }</div></div>",3858:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3858\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">protected</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;ParsedPrototype.</span>&#8203;Section</div></div></div></div>"});