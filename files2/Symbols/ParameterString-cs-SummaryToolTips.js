NDSummary.OnToolTipsLoaded("File2:Symbols/ParameterString.cs",{3157:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3157\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Symbols.</span>&#8203;ParameterString</div></div></div><div class=\"TTSummary\">A struct encapsulating parameters from a symbol, which is a normalized way of representing the parenthetical section of a code element or topic, such as &quot;(int, int)&quot; in &quot;PackageA.PackageB.FunctionC(int, int)&quot;.&nbsp; It supports alternate braces as well such as &quot;this[int]&quot; and &quot;Template&lt;T&gt;&quot;.&nbsp; When generated from prototypes, ParameterStrings only store the types of each parameter, not the names or default values.</div></div>",3159:"<div class=\"NDToolTip TConstant LCSharp\"><div id=\"NDPrototype3159\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public const char</span> SeparatorChar</div><div class=\"TTSummary\">The character used to separate parameter strings.</div></div>",3161:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3161\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private</span> ParameterString (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">newParameterString</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3162:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3162\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static int</span> GetParametersIndex (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">input</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If a plain text string ends in parameters, returns the index of the opening brace character.&nbsp; Returns -1 otherwise.</div></div>",3163:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3163\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static void</span> SplitFromParameters (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">input,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">output,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">parameters</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If a plain text string ends in parameters, returns them and the rest of the text as separate strings.&nbsp; If it doesn\'t, it will return the original string and null.</div></div>",3164:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3164\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static</span> ParameterString FromExportedString (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">exportedParameterString</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Creates a ParameterString from the passed string which originally came from another ParameterString object.&nbsp; This skips the normalization stage because it should already be in the proper format.&nbsp; Only use this when retrieving ParameterStrings that were stored as plain text in a database or other data file.</div></div>",3165:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3165\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static</span> ParameterString FromParameterTypes (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">IList&lt;<span class=\"SHKeyword\">string</span>&gt;&nbsp;</td><td class=\"PName last\">parameterStrings</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Creates a ParameterString from a list of individual plain text parameter types.&nbsp; The strings should be the type of each parameter only and not include the name or default value.</div></div>",3166:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3166\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static</span> ParameterString FromPlainText (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">input</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Creates a ParameterString from plain text such as &quot;(int, int)&quot;.&nbsp; You can extract them from a plain text identifier with GetParametersIndex().</div></div>",3167:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3167\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> GetParameter (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">parameterIndex,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">SimpleTokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">SimpleTokenIterator&nbsp;</td><td class=\"PName last\">end</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the bounds of the numbered parameter and whether or not it exists.&nbsp; Numbers start at zero.</div></div>",3169:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3169\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public int</span> NumberOfParameters { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The number of parameters in the string.</div></div>",3171:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3171\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static implicit operator string</span> (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">ParameterString&nbsp;</td><td class=\"PName last\">p</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">A cast operator to covert the params to a string.</div></div>",3172:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3172\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>== (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">ParameterString&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3173:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3173\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>!= (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">ParameterString&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3174:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3174\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public override string</span> ToString ()</div><div class=\"TTSummary\">Returns the SymbolString as a string.</div></div>",3175:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3175\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public override int</span> GetHashCode ()</div></div>",3176:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3176\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public override bool</span> Equals (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">other</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3177:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3177\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public int</span> CompareTo (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">other</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3179:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3179\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private static void</span> NormalizeAndAppend (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">parameter,</td></tr><tr><td class=\"PModifierQualifier first\">System.Text.</td><td class=\"PType\">StringBuilder&nbsp;</td><td class=\"PName last\">output</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Normalizes the individual parameter and appends it to the passed StringBuilder.&nbsp; It does not append a SeparatorChar, that must be done by the calling code.</div></div>",3180:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3180\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private static bool</span> IsOpeningBrace (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">character</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3181:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3181\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private static bool</span> IsClosingBrace (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">character</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3182:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3182\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private static bool</span> BracesMatch (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">openingChar,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">closingChar</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3184:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3184\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private string</span> parameterString</div><div class=\"TTSummary\">The parameter string, <u>always</u> in normalized form.</div></div>",3186:"<div class=\"NDToolTip TVariable LCSharp\"><div class=\"TTSummary\">An array containing the whitespace and separator characters.</div></div>",3187:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3187\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">static private char</span>[] SeparatorCharsAndWhitespace</div></div>",3188:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3188\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">static private char</span>[] AllBraces</div><div class=\"TTSummary\">An array containing all forms of braces.</div></div>",3189:"<div class=\"NDToolTip TVariable LCSharp\"><div class=\"TTSummary\">An array containing all forms of braces, comma, and semicolon.</div></div>",3190:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3190\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">static private char</span>[] AllBracesAndParamSeparators</div></div>"});