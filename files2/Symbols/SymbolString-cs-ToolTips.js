NDContentPage.OnToolTipsLoaded({3116:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3116\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public static</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Symbols.</span>&#8203;SeparatorChars</div></div></div><div class=\"TTSummary\">The reserved characters that can be used as separators by the symbol encodings.&nbsp; They use consecutive values so they can be checked for by looking between LowestValue and HighestValue in addition to individually by name.</div></div>",3118:"<div class=\"NDToolTip TConstant LCSharp\"><div id=\"NDPrototype3118\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public const char</span> Level1</div><div class=\"TTSummary\">A character that can be used to separate strings which do not contain any other separator characters.</div></div>",3124:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3124\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Symbols.</span>&#8203;SymbolString</div></div></div><div class=\"TTSummary\">A struct encapsulating a symbol string, which is a normalized way of representing a hierarchal code element or topic, such as &quot;PackageA.PackageB.FunctionC&quot;.</div></div>",3126:"<div class=\"NDToolTip TConstant LCSharp\"><div id=\"NDPrototype3126\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public const char</span> SeparatorChar</div><div class=\"TTSummary\">The character used to separate symbol segments.</div></div>",3129:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3129\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static public</span> SymbolString FromPlainText (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">textSymbol,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">parameters</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Creates a SymbolString from the passed string of plain text.</div></div>",3131:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3131\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static public</span> SymbolString FromExportedString (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">exportedSymbolString</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Creates a SymbolString from the passed string which originally came from another SymbolString object.&nbsp; This skips the normalization stage because it should already be in the proper format.&nbsp; Only use this when retrieving SymbolStrings that were stored as plain text in a database or other data file.&nbsp; All other uses should call FromPlainText() instead.</div></div>",3139:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3139\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> EndingSymbol EndingSymbol { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Returns the EndingSymbol of the symbol string.&nbsp; Unlike LastSegment and SymbolStrings in general, EndingSymbols are case-insensitive.&nbsp; So for &quot;PackageA.PackageB.FunctionC&quot; this will return an EndingSymbol for &quot;functionc&quot;.</div></div>",3140:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3140\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> LastSegment { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Returns the last segment of the symbol string.&nbsp; Unlike EndingSymbol this is case sensitive, so for &quot;PackageA.PackageB.FunctionC&quot; this will return &quot;FunctionC&quot;.</div></div>",3155:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3155\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private string</span> symbolString</div><div class=\"TTSummary\">The symbol, <u>always</u> in normalized form.</div></div>",3157:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3157\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Symbols.</span>&#8203;ParameterString</div></div></div><div class=\"TTSummary\">A struct encapsulating parameters from a symbol, which is a normalized way of representing the parenthetical section of a code element or topic, such as &quot;(int, int)&quot; in &quot;PackageA.PackageB.FunctionC(int, int)&quot;.&nbsp; It supports alternate braces as well such as &quot;this[int]&quot; and &quot;Template&lt;T&gt;&quot;.&nbsp; When generated from prototypes, ParameterStrings only store the types of each parameter, not the names or default values.</div></div>",3166:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3166\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static</span> ParameterString FromPlainText (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">input</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Creates a ParameterString from plain text such as &quot;(int, int)&quot;.&nbsp; You can extract them from a plain text identifier with GetParametersIndex().</div></div>",3191:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3191\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Symbols.</span>&#8203;EndingSymbol</div></div></div><div class=\"TTSummary\">A struct encapsulating the ending symbol from a symbol string, which is a normalized way of representing the last part of a hierarchal code element or topic, such as &quot;functionc&quot; in &quot;PackageA.PackageB.FunctionC&quot;.&nbsp; Unlike SymbolStrings, ending symbols are case-insensitive.</div></div>",3354:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3354\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static public</span> FundamentalType FundamentalTypeOf (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">character</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the FundamentalType of the passed character.</div></div>"});