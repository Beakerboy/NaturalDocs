NDContentPage.OnToolTipsLoaded({3116:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3116\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public static</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Symbols.</span>&#8203;SeparatorChars</div></div></div><div class=\"TTSummary\">The reserved characters that can be used as separators by the symbol encodings.&nbsp; They use consecutive values so they can be checked for by looking between LowestValue and HighestValue in addition to individually by name.</div></div>",3124:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3124\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Symbols.</span>&#8203;SymbolString</div></div></div><div class=\"TTSummary\">A struct encapsulating a symbol string, which is a normalized way of representing a hierarchal code element or topic, such as &quot;PackageA.PackageB.FunctionC&quot;.</div></div>",3157:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3157\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Symbols.</span>&#8203;ParameterString</div></div></div><div class=\"TTSummary\">A struct encapsulating parameters from a symbol, which is a normalized way of representing the parenthetical section of a code element or topic, such as &quot;(int, int)&quot; in &quot;PackageA.PackageB.FunctionC(int, int)&quot;.&nbsp; It supports alternate braces as well such as &quot;this[int]&quot; and &quot;Template&lt;T&gt;&quot;.&nbsp; When generated from prototypes, ParameterStrings only store the types of each parameter, not the names or default values.</div></div>",3159:"<div class=\"NDToolTip TConstant LCSharp\"><div id=\"NDPrototype3159\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public const char</span> SeparatorChar</div><div class=\"TTSummary\">The character used to separate parameter strings.</div></div>",3162:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3162\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static int</span> GetParametersIndex (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">input</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If a plain text string ends in parameters, returns the index of the opening brace character.&nbsp; Returns -1 otherwise.</div></div>",3354:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3354\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static public</span> FundamentalType FundamentalTypeOf (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">character</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the FundamentalType of the passed character.</div></div>",3383:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3383\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;SimpleTokenIterator</div></div></div><div class=\"TTSummary\">An iterator that walks through an untokenized string in a similar manner to TokenIterator.&nbsp; It figures out tokens on the fly and is useful for comparing TokenIterators to simple strings where having a Tokenizer would be overkill.&nbsp; However, it contains only a small subset of the functionality in TokenIterator and isn\'t efficient for serious parsing.</div></div>"});