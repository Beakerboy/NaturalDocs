NDSummary.OnToolTipsLoaded("File2:Path.cs",{3786:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3786\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.</span>&#8203;Path</div></div></div><div class=\"TTSummary\">A struct encapsulating a file path string.&nbsp; This is needed because Natural Docs needs to be able to handle all three path formats at once, not just the local format.&nbsp; Natural Docs on Windows may be reading a configuration file from Natural Docs on Linux and vice versa.</div></div>",3788:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3788\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> Path (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">newPath</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Creates a new Path from the passed string.</div></div>",3789:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3789\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> IsAbsolute { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Whether the path is absolute.</div></div>",3790:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3790\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> IsRelative { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Whether the path is relative.</div></div>",3791:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3791\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> Prefix { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The prefix of the path if it\'s absolute, or null if it\'s relative.&nbsp; The prefix can be &quot;C:&quot;, &quot;\\\\server&quot;, or &quot;/&quot;.</div></div>",3792:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3792\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> Extension { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The file extension of the path, or null if there is none.</div></div>",3793:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3793\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> Path ParentFolder { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The parent folder of the path.&nbsp; If the path is to a file, it will be a path to its containing folder.&nbsp; If the path is to a folder, it will be the folder above it.&nbsp; If the path is relative it will start using &quot;..&quot; once the visible path is exhausted.&nbsp; If the path is absolute it will stop at the volume, so the parent folder of C: is C:.</div></div>",3794:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3794\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> NameWithoutPath { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The file name without its path.</div></div>",3795:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3795\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> NameWithoutPathOrExtension { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The file name without its path or extension.</div></div>",3796:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3796\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> Contains (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Path&nbsp;</td><td class=\"PName last\">other</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether this path contains the passed one, meaning it\'s a higher level folder.</div></div>",3797:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3797\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> Path MakeRelativeTo (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Path&nbsp;</td><td class=\"PName last\">folder</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the path as one relative to the passed folder, if possible.&nbsp; If it\'s not possible (for example, if they\'re on different drive letters) it returns null.</div></div>",3798:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3798\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> Split (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">prefix,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">List&lt;<span class=\"SHKeyword\">string</span>&gt;&nbsp;</td><td class=\"PName last\">sections</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Splits the path into a prefix and a list of strings, each representing a segment of it.&nbsp; If the path was absolute, prefix will be set to something like &quot;C:&quot;, &quot;\\\\server&quot;, or &quot;/&quot;.&nbsp; Otherwise it will be null.&nbsp; The sections array will have an entry for each folder name and one for the file name if there was one.&nbsp; No separator characters will be included.&nbsp; It will return an empty list if there\'s nothing other than the prefix.</div></div>",3799:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3799\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static public</span> Path FromCommandLine (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>[]&nbsp;</td><td class=\"PName last\">commandLine,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">index</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Retrieves a file path from the command line, returning it and advancing the index.&nbsp; If the first string starts with a quote it continues until it reaches an end quote.&nbsp; Otherwise it continues until it reaches a string that starts with a dash.</div></div>",3800:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3800\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static public</span> Path FromAssembly (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">System.Reflection.</td><td class=\"PType\">Assembly&nbsp;</td><td class=\"PName last\">assembly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns a path to the passed .NET assembly.</div></div>",3801:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3801\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> ToURL ()</div><div class=\"TTSummary\">Converts the path to an URL string, meaning it will always use slashes as separators, even on Windows.</div></div>",3803:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3803\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static implicit operator string</span> (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Path&nbsp;</td><td class=\"PName last\">filePath</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">A cast operator to covert the Path to a string.</div></div>",3804:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3804\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static implicit operator</span> Path (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">newString</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">A cast operator to convert a string to a Path.&nbsp; The string will be normalized.</div></div>",3805:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3805\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>== (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Path&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\">Path&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3806:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3806\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>!= (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Path&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\">Path&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3807:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3807\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static int</span> Compare (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Path&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\">Path&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3808:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3808\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public override string</span> ToString ()</div><div class=\"TTSummary\">Returns the Path as a string.</div></div>",3809:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3809\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public override int</span> GetHashCode ()</div></div>",3810:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3810\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public override bool</span> Equals (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">obj</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3811:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3811\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public int</span> CompareTo (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">other</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3813:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3813\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private void</span> Normalize ()</div><div class=\"TTSummary\">Normalizes pathString.</div></div>",3815:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3815\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private string</span> pathString</div><div class=\"TTSummary\">The path, <u>always</u> in normalized form.&nbsp; See Normalize() for what that means specifically.</div></div>",3817:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3817\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">static private char</span>[] normalizedSeparators</div><div class=\"TTSummary\">An array of the available normalized path separators.</div></div>",3818:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3818\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">static private char</span>[] unnormalizedSeparators</div><div class=\"TTSummary\">An array of all the possible path separators before normalization.</div></div>",3819:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3819\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">static private</span> Regex.Path.PathPrefix pathPrefixRegex</div><div class=\"TTSummary\">The regular expression that capture the path prefix, such as &quot;/&quot; on Unix and &quot;\\\\&quot; or &quot;c:&quot; on Windows.</div></div>"});