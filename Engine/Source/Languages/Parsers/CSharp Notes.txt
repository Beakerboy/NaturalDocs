
Title: C# Parser Notes
_______________________________________________________________________________

This parser was originally built from version 4.0 of the <C# language specification: http://www.microsoft.com/en-us/download/details.aspx?id=7029>,
though it has been updated for newer language features.  All references below such as [2.3.1] refer to headings in this document.

The parser may be more tolerant than the actual C# syntax in places.  For example, destructors may not have modifiers other than 
"extern", but this parser will accept any of the standard ones like "public" and "protected".  This is done wherever it may simplify the 
parser code (in this case, condensing all modifier parsing into a single <TryToSkipModifiers()> function) as it's not important for the code 
to be perfectly valid in order to generate documentation.

In other places it may be less tolerant, but these are documented in <Unsupported Features>.



Group: Traps for the Unwary
_______________________________________________________________________________

	Language features that are supported but aren't obvious and so must be kept in mind when working on the parser.


	Topic: @ Identifiers

		Identifiers may be prefixed with the @ symbol, which allows the use of keywords as identifiers [2.4.2].  Thus "class" should be 
		highlighted as a keyword but "@class" should not.


	Topic: Access Level Interaction

		When a class marked "internal" has a member marked "public", the member is functionally "internal" for all practical purposes.
		See [3.5.2] for the full rules regarding these types of interactions.


	Topic: Pointer Types and Unsafe Code

		Unsafe code extensions are documented separately in [18] and [B.3], so looking at the syntax diagrams without them will give
		an incomplete picture.  For example, void* is a valid type that can be used anywhere even though void would only be used in
		function return values otherwise.

		Also, look at this code:

		> int* x, y;

		In C++ that would mean
		
		> int *x, int y
		
		as the asterisk is associated with the name.  In C# it means
		
		> int* x, int* y 
		
		as the asterisk is associated with the type.



Group: Unsupported Features
_______________________________________________________________________________

	These language elements are not supported by the parser.
	

	Topic: Alternative Line Breaks

		The parser supports the standard line break formats:

			Windows - CR/LF (U+000D, U+000A)
			Unix - LF (U+000A)
			Mac - CR (U+000D)

		The parser does not support the alternative formats C# supports [2.3.1]:

			Next line character - U+0085
			Line separator character - U+2028
			Paragraph separator character - U+2029


	Topic: Alternative White Space

		The parser supports the following whitespace characters:

			Space - U+0020
			Tab - U+0009

		The parser does not support the alternative characters C# supports [2.3.3]:

			Vertical tab character - U+000B
			Form feed character - U+000C
			Unicode class Zs - All characters in class Zs, (Separator, Space).


	Topic: Unicode Escapes Sequences in Identifiers

		The parser supports Unicode escape sequences ("\u0066") in string and char literals.  C# also supports them in identifiers [2.4.1]
		so that this:

		> \u0066 = 12;

		is completely valid and equivalent to this:

		> f = 12;

		The parser does not support that bullshit.


	Topic: @ Identifier Equivalence

		The @ character can precede an identifier to allow keywords to be used, such as "int @class = 6" [2.4.2].  This is supported.  
		However, the @ character is not actually part of the name, so it can also be used with non-keywords and "@x" and "x" are considered
		the same identifier.  This is not supported.


	Topic: Identifier Characters

		Excluding the @, C# identifiers can start with an underscore or any character in Unicode classes Lu (Letter, Uppercase) Ll (Letter, Lowercase)
		Lt, Lm, Lo, or Nl.  Subsequent characters can also be in the character classes Mn, Mc, Nd (Number, Decimal Digit) Pc, or Cf [2.4.2].

		The parser follows these rules for ASCII characters, but all Unicode characters beyond U+007F are treated as if they are a letter.


	Topic: Contextual Keywords

		In C# "get", "set", and "var" are not standard keywords [2.4.3] and thus can be used as identifiers.  The parser will always highlight them 
		as keywords.


	Topic: Separate Accessor Access Levels

		Properties can have access keywords like "public" applied to itself as a whole and also specifically to get and set.  While the access keywords
		applied to get and set will appear in the prototype, Natural Docs will otherwise only use the overall access level of the property.