NDContentPage.OnToolTipsLoaded({392:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype392\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;CommentTypes.</span>&#8203;ConfigFileCommentType</div></div></div><div class=\"TTSummary\">A class encapsulating information about a comment type as parsed from a ConfigFile.&nbsp; This differs from CommentType in that its meant to represent how its entry appears in the config file rather than the final combined settings.&nbsp; For example, any field can be null if it\'s not defined.</div></div>",428:"<div class=\"NDToolTip TFile LCSharp\"><div class=\"TTSummary\">A binary file which stores the combined results of the two versions of Comments.txt as of the last run, as well as storing the IDs of each type so they maintain their consistency between runs.</div></div>",434:"<div class=\"NDToolTip TFile LCSharp\"><div class=\"TTSummary\">The configuration file that defines or overrides the comment type definitions for Natural Docs.&nbsp; One version sits in Natural Docs\' configuration folder, and another in the project configuration folder to add comment types or override their behavior.</div></div>",472:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype472\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> FlagValues : <span class=\"SHKeyword\">ushort</span></div></div>",481:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">Set if the comment type was defined in the system config file Comments.txt.</div></div>",482:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">Set if the comment type was defined in the project config file Comments.txt.&nbsp; Not set for Alter Comment Type.</div></div>",487:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype487\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> List&lt;<span class=\"SHKeyword\">string</span>&gt; Validate (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">strict,</td></tr><tr><td class=\"PModifierQualifier first\">CommentType.</td><td class=\"PType\">ScopeValue?&nbsp;</td><td class=\"PName last\">scope,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">localeModule</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Checks the flags for problems.&nbsp; If there aren\'t any it will return null.&nbsp; If there are it will return a list of error messages.</div></div>",488:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype488\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public void</span> AddImpliedFlags ()</div><div class=\"TTSummary\">Adds flags that are implied by other flags, such as how Enum implies Code and VariableType.&nbsp; Also sets Code if File or Documentation isn\'t set.</div></div>",490:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype490\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> FlagValues AllConfigurationProperties { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">All of the properties below combined into one FlagValues except for the location properties.&nbsp; This allows them all to be compared at once, or see if any are set by comparing against zero, or read or write them to disk as one value.&nbsp; Setting this will not affect the location properties.</div></div>",491:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype491\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> Code { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">Whether the comment type describes a code element.</div></div>",492:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype492\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> File { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">Whether the comment type describes a file.</div></div>",493:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype493\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> Documentation { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">Whether the comment type is used for standalone documentation.</div></div>",494:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype494\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> VariableType { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">Whether the comment type describes a code element that can be used as the type of a variable.</div></div>",497:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype497\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> Enum { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">Whether the comment type describes an enum.</div></div>",505:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype505\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;CommentTypes.</span>&#8203;CommentType</div></div></div><div class=\"TTSummary\">A class encapsulating information about a comment type.&nbsp; This differs from ConfigFileCommentType in that its meant to represent the final combined settings of a comment type rather than its entry in a config file.&nbsp; For example, all fields are initialized to default values rather than null or Default, and it doesn\'t store the type\'s keywords.</div></div>",507:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype507\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> ScopeValue : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">Can be Normal, Start, End, or AlwaysGlobal.</div></div>",3916:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3916\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">static public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.</span>&#8203;Locale</div></div></div><div class=\"TTSummary\">The localization engine for all of Natural Docs.</div></div>"});