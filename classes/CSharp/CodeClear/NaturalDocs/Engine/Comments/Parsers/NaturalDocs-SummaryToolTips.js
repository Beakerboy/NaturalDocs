NDSummary.OnToolTipsLoaded("CSharpClass:CodeClear.NaturalDocs.Engine.Comments.Parsers.NaturalDocs",{815:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype815\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Comments.&#8203;Parsers.</span>&#8203;NaturalDocs</div></div></div><div class=\"TTSummary\">A parser to handle Natural Docs\' native comment format.</div></div>",816:"<div class=\"NDToolTip TFile LCSharp\"><div class=\"TTSummary\">A configuration file to handle various non-topic keywords in Natural Docs formatted comments.&nbsp; The file follows the standard conventions in ConfigFile.&nbsp; Identifier and value whitespace is condensed.</div></div>",817:"<div class=\"NDToolTip TFile LCSharp\"><div class=\"TTSummary\">A binary file to store the last version of Parser.txt used in order to detect changes.</div></div>",819:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype819\" class=\"NDPrototype NoParameterForm\"><div class=\"PPrePrototypeLine\"><span class=\"SHMetadata\">[Flags]</span></div><span class=\"SHKeyword\">public enum</span> LinkInterpretationFlags : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">Options you can pass to LinkInterpretations().</div></div>",824:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype824\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> BlockType : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">The type of block started by lines like &quot;(start code)&quot;.</div></div>",828:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype828\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> HeadingType : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">The type of block started by a recognized heading.</div></div>",831:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype831\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected enum</span> SetIndex</div><div class=\"TTSummary\">The index into sets for each item.&nbsp; The values must start at zero and proceed sequentially.&nbsp; MaxValue must be set to the highest used value.&nbsp; The value names are used by LoadFile(), so they must match the possible set names in Parser.txt exactly with the exception of spaces.</div></div>",832:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype832\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected enum</span> TableIndex</div><div class=\"TTSummary\">The index into tables for each item.&nbsp; The values must start at zero and proceed sequentially.&nbsp; MaxValue must be set to the highest used value.&nbsp; The value names are used by LoadFile(), so they must match the possible table names in Parser.txt exactly with the exception of spaces.</div></div>",833:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype833\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected enum</span> ConversionListIndex</div><div class=\"TTSummary\">The index into conversionLists for each item.&nbsp; The values must start at zero and proceed sequentially.&nbsp; MaxValue must be set to the highest used value.&nbsp; The value names are used by LoadFile(), so they must match the possible list names in Parser.txt exactly with the exception of spaces.</div></div>",835:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype835\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> NaturalDocs (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">Comments.</td><td class=\"PType\">Manager&nbsp;</td><td class=\"PName last\">manager</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",836:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype836\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public override bool</span> Start (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">Errors.</td><td class=\"PType\">ErrorList&nbsp;</td><td class=\"PName last\">errors</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",837:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype837\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> Parse (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">PossibleDocumentationComment&nbsp;</td><td class=\"PName last\">comment,</td></tr><tr><td class=\"PType first\">List&lt;Topic&gt;&nbsp;</td><td class=\"PName last\">topics,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">requireHeader</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Attempts to parse the passed comment into Topics.&nbsp; Returns whether it was successful, and if so, adds them to the list.&nbsp; These fields will be set:</div></div>",838:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype838\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> List&lt;LinkInterpretation&gt; LinkInterpretations (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">linkText,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">LinkInterpretationFlags&nbsp;</td><td class=\"PName last\">flags,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">parameters</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Generates a list of possible interpretations for the passed target of a Natural Docs link, or null if there are none.&nbsp; If LinkInterpretationFlags.ExcludeLiteral is not set it will always return a list of at least one interpretation.</div></div>",839:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype839\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> List&lt;LinkInterpretation&gt; LinkInterpretations_NoParameters (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">linkText,</td></tr><tr><td class=\"PType first\">LinkInterpretationFlags&nbsp;</td><td class=\"PName last\">flags</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Generates a list of possible interpretations for the passed target of a Natural Docs link, or null if there are none.&nbsp; If LinkInterpretationFlags.ExcludeLiteral is not set it will always return a list of at least one interpretation.</div></div>",841:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype841\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> IsAccessLevelTag (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">tag,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span> Languages.</td><td class=\"PType\">AccessLevel&nbsp;</td><td class=\"PName last\">accessLevel</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the passed string is an access level tag, and if so, also returns the Languages.AccessLevel associated with it.</div></div>",842:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype842\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> IsTopicLine (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">LineIterator&nbsp;</td><td class=\"PName last\">lineIterator,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">Topic&nbsp;</td><td class=\"PName last\">topic</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the passed LineIterator is on a topic line, and if so, returns a Topic with the following fields filled in:</div></div>",843:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype843\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> IsParenTagLine (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">LineIterator&nbsp;</td><td class=\"PName last\">lineIterator,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">content</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns true if the entire line is enclosed in parentheses and satisfies a few other requirements to be suitable for a parenthetical tag like &quot;(start code)&quot; or &quot;(see image.jpg)&quot;.&nbsp; Will return the contents of the parentheses with all whitespace condensed.</div></div>",844:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype844\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> IsHorizontalLineTagLine (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">LineIterator&nbsp;</td><td class=\"PName last\">lineIterator,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">content,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">character</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns true if the line starts with at least three dashes, underscores, or equals signs and satisfies a few other requirements to be suitable for a line block tag like &quot;--- code&quot; or &quot;==== Perl ====&quot;.&nbsp; Will return the contents of the tag with all whitespace condensed as well as which character was used.</div></div>",845:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype845\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> IsHorizontalLineEnderLine (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">LineIterator&nbsp;</td><td class=\"PName last\">lineIterator,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">character</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns true if the line only contains at least three dashes, underscores, or equals signs so that it\'s suitable to end a horizontal line tag line of the same character.</div></div>",846:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype846\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> IsStartBlockKeyword (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">keyword</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the passed string is a start block keyword, which would be the first word in &quot;(start code)&quot;.</div></div>",847:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype847\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> IsEndBlockKeyword (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">keyword</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the passed string is an end block keyword, which would be the first word in &quot;(end code)&quot;.</div></div>",848:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype848\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> IsBlockType (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">keyword,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">BlockType&nbsp;</td><td class=\"PName last\">blockType</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the passed string represents a block type, which would be the second word in &quot;(start code)&quot;, and which BlockType it is if so.</div></div>",849:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype849\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> IsStartBlockLine (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">LineIterator&nbsp;</td><td class=\"PName last\">lineIterator,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">character,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">BlockType&nbsp;</td><td class=\"PName last\">blockType,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">Language&nbsp;</td><td class=\"PName last\">language</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the LineIterator is on a start block line like &quot;(start code)&quot; or &quot;--- code&quot;, and if so, which BlockType and character it uses.&nbsp; If it was a code block and a language was specified, also returns that Language.</div></div>",850:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype850\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> IsEndBlockLine (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">LineIterator&nbsp;</td><td class=\"PName last\">lineIterator,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">character</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns if the LineIterator is on an end block line like &quot;(end code)&quot;, &quot;--- end&quot;, or &quot;---&quot;, and what character it uses.</div></div>",851:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype851\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> IsHeading (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">LineIterator&nbsp;</td><td class=\"PName last\">lineIterator,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">heading,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">HeadingType&nbsp;</td><td class=\"PName last\">headingType</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the passed LineIterator is on a heading, and if so, returns the heading\'s raw text and what type of heading it was.</div></div>",852:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype852\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> IsHeadingContent (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">iterator,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">endOfContent</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Tests the capitalization of the text between the iterators to see whether the content should be interpreted as a heading or left as plain text.&nbsp; The iterators should not include the colon.</div></div>",853:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype853\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> IsHeadingWord (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">end,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">isFirstWord,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">isLastWord</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Tests the capitalization of the single word between the iterators to see whether it should be interpreted as part of a heading or plain text.&nbsp; All words in a heading should pass this test for it to be seen as a heading.</div></div>",854:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype854\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> GetPreformattedLine (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">LineIterator&nbsp;</td><td class=\"PName last\">lineIterator,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">line,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">indent</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the line specified by the LineIterator as a preformatted line, meaning all leading whitespace will be preserved and all tabs will expanded.&nbsp; Trailing whitespace will be removed, and empty lines will return empty strings with indent 0.&nbsp; Comment symbols and decoration will be replaced by spaces.</div></div>",855:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype855\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> IsStandalonePreformattedLine (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">LineIterator&nbsp;</td><td class=\"PName last\">lineIterator,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">line,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">indent,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">leadingCharacter</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the line specified by the LineIterator is a standalone preformatted line, meaning it starts with :, &gt;, or |.&nbsp; If so, returns it as a string with leading whitespace preserved and all tabs expanded.&nbsp; Any comment symbols, decoration, and the leading :, &gt;, or | will be replaced by spaces.&nbsp; Trailing whitespace will be removed, and empty lines will return empty strings with indent 0.</div></div>",856:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype856\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> IsImageKeyword (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">keyword</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the passed string is an image keyword, which would be the first word in &quot;(see image.jpg)&quot;.</div></div>",857:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype857\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> IsImageTagContent (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">betweenParens,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">keyword,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">Path&nbsp;</td><td class=\"PName last\">file</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the passed string is the content of an image tag, like &quot;see image.jpg&quot;.&nbsp; It validates the file name against the registered extensions in Files.FileSources.Folder.&nbsp; The string must not contain the parentheses.&nbsp; If it is tag content it will also returns the keyword and file name.</div></div>",858:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype858\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> IsStandaloneImage (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">LineIterator&nbsp;</td><td class=\"PName last\">lineIterator,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">Path&nbsp;</td><td class=\"PName last\">file</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the line specified by LineIterator is a standalone image line, like &quot;(see image.jpg)&quot;.&nbsp; If so also returns the file name.</div></div>",859:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype859\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> IsBulletLine (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">LineIterator&nbsp;</td><td class=\"PName last\">lineIterator,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">content,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">bulletChar,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">indent</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the line specified by LineIterator starts with a bullet, and if so, returns the raw content and indent.</div></div>",860:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype860\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> IsDefinitionLine (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">LineIterator&nbsp;</td><td class=\"PName last\">lineIterator,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">leftSide,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">rightSide,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">indent</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the line specified by LineIterator is a line from a definition list, and if so, returns the content and indent.</div></div>",861:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype861\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> IsURLProtocol (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">input</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the passed string is a valid URL protocol.&nbsp; Must not include the colon.</div></div>",862:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype862\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> IsAtLinkKeyword (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">keyword</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the passed string is an &quot;at&quot; link keyword, such as in &quot;e-mail me&quot;.</div></div>",863:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype863\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> ParseBody (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">LineIterator&nbsp;</td><td class=\"PName last\">firstContentLine,</td></tr><tr><td class=\"PType first\">LineIterator&nbsp;</td><td class=\"PName last\">endOfContent,</td></tr><tr><td class=\"PType first\">Topic&nbsp;</td><td class=\"PName last\">topic</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Parses the content between two LineIterators and adds its content to the Topic in &lt;NDMarkup&gt; as its body.&nbsp; Also extracts the summary from it and adds it to the Topic.</div></div>",864:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype864\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> AddRawCodeLineToList (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">rawCodeLine,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">rawCodeLineIndent,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">List&lt;<span class=\"SHKeyword\">string</span>&gt;&nbsp;</td><td class=\"PName last\">codeLines,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">sharedIndent</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Adds the line of text to the list of code lines, keeping the shared indent updated as it goes.&nbsp; It does not convert its content into &lt;NDMarkup&gt;.&nbsp; The shared indent should start at -1 for a block, and it will remain there if there\'s never been a line of content.</div></div>",865:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype865\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> AddRawCodeLinesToNDMarkup (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;<span class=\"SHKeyword\">string</span>&gt;&nbsp;</td><td class=\"PName last\">rawCodeLines,</td></tr><tr><td class=\"PType first\">StringBuilder&nbsp;</td><td class=\"PName last\">ndMarkup,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">sharedIndent</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Adds the list of raw code lines to NDMarkup, removing the shared indent as it goes.</div></div>",866:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype866\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> CloseParagraph (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">StringBuilder&nbsp;</td><td class=\"PName last\">paragraph,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">StringBuilder&nbsp;</td><td class=\"PName last\">body</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the paragraph isn\'t null or empty, convert its contents to &lt;NDMarkup&gt;, add it to the body along with a closing &lt;/p&gt;, and empty it.</div></div>",867:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype867\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> CloseAllBlocks (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">StringBuilder&nbsp;</td><td class=\"PName last\">paragraph,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">definitionIndent,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">List&lt;<span class=\"SHKeyword\">int</span>&gt;&nbsp;</td><td class=\"PName last\">bulletIndents,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">StringBuilder&nbsp;</td><td class=\"PName last\">body</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If any of the blocks are open it will close them and add the content to the body.</div></div>",868:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype868\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> ParseTextBlock (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">input,</td></tr><tr><td class=\"PType first\">StringBuilder&nbsp;</td><td class=\"PName last\">output</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Parses a block of text for inline tags and adds it to the StringBuilder as &lt;NDMarkup&gt;.</div></div>",869:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype869\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> MarkPossibleFormattingTags (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">tokenizer</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the passed Tokenizer and marks asterisks and underscores with CommentParsingType.PossibleOpeningTag and CommentParsingType.PossibleClosingTag if they can possibly be interpreted as bold and underline formatting.</div></div>",870:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype870\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> MarkPossibleLinkTags (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">tokenizer</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the passed Tokenizer and marks angle brackets with CommentParsingType.PossibleOpeningTag and CommentParsingType.PossibleClosingTag if they can possibly be interpreted as links.&nbsp; Call MarkPossibleFormattingTags() prior to this in order to allow links to be tolerant of formatting tags surrounding them.&nbsp; Call MarkPossibleInlineImageTags() after this so marked parentheses don\'t screw it up.</div></div>",871:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype871\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> MarkPossibleInlineImageTags (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">tokenizer</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the passed Tokenizer and marks parentheses with CommentParsingType.PossibleOpeningTag and CommentParsingType.PossibleClosingTag if they can possibly be used for inline images.&nbsp; This does NOT validate the content of the parentheses, merely that they are acceptable candidates.</div></div>",872:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype872\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> FinalizeLinkTags (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">tokenizer</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the passed Tokenizer and converts all angle brackets marked as CommentParsingType.PossibleOpeningTag and CommentParsingType.PossibleClosingTag to CommentParsingType.OpeningTag, CommentParsingType.ClosingTag, or back to CommentParsingType.Null.&nbsp; It makes sure every opening tag has a closing tag and removes possible tag markings on other symbols between them.&nbsp; Call this before FinalizeInlineImageTags() and FinalizeFormattingTags() because parentheses, asterisks, and underscores can be part of a link\'s content.</div></div>",873:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype873\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> FinalizeInlineImageTags (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">tokenizer</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the passed Tokenizer and converts all parentheses marked as CommentParsingType.PossibleOpeningTag and CommentParsingType.PossibleClosingTag to CommentParsingType.OpeningTag, CommentParsingType.ClosingTag, or back to CommentParsingType.Null.&nbsp; It makes sure every opening tag has a closing tag, the content is in the right format, and removes possible tag markings on other symbols between them.&nbsp; Call this before FinalizeFormattingTags() because asterisks and underscores may be part of a tag\'s content.</div></div>",874:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype874\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> FinalizeFormattingTags (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">tokenizer</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the passed Tokenizer and converts all asterisks and underscores marked as CommentParsingType.PossibleOpeningTag and CommentParsingType.PossibleClosingTag to CommentParsingType.OpeningTag, CommentParsingType.ClosingTag, or back to CommentParsingType.Null.&nbsp; It makes sure every opening tag has a closing tag.&nbsp; Call this after FinalizeLinkTags() and FinalizeInlineImageTags() so that these are the only tokens marked as possible tags left.</div></div>",875:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype875\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> MarkURLs (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">tokenizer</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the passed Tokenizer and marks all tokens than are part of an URL with CommentParsingType.URL.&nbsp; This should be called after the MarkPossibleTags functions so it can reclaim any of their characters if it needs to, but before the FinalizeTags functions so it\'s not invalidating them.</div></div>",876:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype876\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> MarkEMailAddresses (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">tokenizer</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the passed Tokenizer and marks all tokens than are part of an e-mail address with CommentParsingType.EMail.&nbsp; This should be called after the MarkPossibleTags functions so it can reclaim any of their characters if it needs to, but before the FinalizeTags functions so it\'s not invalidating them.</div></div>",877:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype877\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> MarkedTokensToNDMarkup(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">tokenizer,</td></tr><tr><td class=\"PType first\">StringBuilder&nbsp;</td><td class=\"PName last\">output</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Appends the tokenizer\'s content to the StringBuilder as NDMarkup.&nbsp; All tokens marked with types like CommentParsingType.URL and CommentParsingType.OpeningTag will be converted to tags.</div></div>",878:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype878\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> ExtractEmbeddedTopics (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Topic&nbsp;</td><td class=\"PName last\">topic,</td></tr><tr><td class=\"PType first\">IList&lt;Topic&gt;&nbsp;</td><td class=\"PName last\">topicList</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the topic body to find any definition list symbols and adds them to the list as separate topics.&nbsp; Since embedded topics must appear immediately after their parent topic, this must be called while the passed topic is at the end of the list.</div></div>",880:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype880\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static public bool</span> LoadFile (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">Path&nbsp;</td><td class=\"PName last\">filename,</td></tr><tr><td class=\"PModifierQualifier first\">Errors.</td><td class=\"PType\">ErrorList&nbsp;</td><td class=\"PName last\">errors,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">StringSet[]&nbsp;</td><td class=\"PName last\">sets,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">StringTable&lt;<span class=\"SHKeyword\">byte</span>&gt;[]&nbsp;</td><td class=\"PName last\">tables,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">List&lt;<span class=\"SHKeyword\">string</span>&gt;[]&nbsp;</td><td class=\"PName last\">conversionLists</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Loads Parser.txt and puts the results in the various out parameters, returning whether it was successful or not.&nbsp; If it wasn\'t, the out structures will still exist but be empty and all errors will be added to the error list.</div></div>",881:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype881\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static public bool</span> LoadBinaryFile (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">Path&nbsp;</td><td class=\"PName last\">filename,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">StringSet[]&nbsp;</td><td class=\"PName last\">binarySets,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">StringTable&lt;<span class=\"SHKeyword\">byte</span>&gt;[]&nbsp;</td><td class=\"PName last\">binaryTables,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">List&lt;<span class=\"SHKeyword\">string</span>&gt;[]&nbsp;</td><td class=\"PName last\">binaryConversionLists</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Loads Parser.nd and puts the results in the various out parameters, returning whether it was successful or not.&nbsp; If it wasn\'t, the out structures will still exist but be empty.</div></div>",882:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype882\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static private void</span> LoadBinaryFile_GetSet(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">BinaryFile&nbsp;</td><td class=\"PName last\">file,</td></tr><tr><td class=\"PType first\">StringSet&nbsp;</td><td class=\"PName last\">set</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">A helper function used only by LoadBinaryFile() which loads values into the passed StringSet until it reaches a null string.</div></div>",883:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype883\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static private void</span> LoadBinaryFile_GetTable(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">BinaryFile&nbsp;</td><td class=\"PName last\">file,</td></tr><tr><td class=\"PType first\">StringTable&lt;<span class=\"SHKeyword\">byte</span>&gt;&nbsp;</td><td class=\"PName last\">table</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">A helper function used only by LoadBinaryFile() which loads values into the passed StringTable until it reaches a null string.</div></div>",884:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype884\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static private void</span> LoadBinaryFile_GetConversionList(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">BinaryFile&nbsp;</td><td class=\"PName last\">file,</td></tr><tr><td class=\"PType first\">List&lt;<span class=\"SHKeyword\">string</span>&gt;&nbsp;</td><td class=\"PName last\">conversionList</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">A helper function used only by LoadBinaryFile() which loads values into the passed conversion list until it reaches a null string.</div></div>",885:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype885\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static public void</span> SaveBinaryFile (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Path&nbsp;</td><td class=\"PName last\">filename,</td></tr><tr><td class=\"PType first\">StringSet[]&nbsp;</td><td class=\"PName last\">sets,</td></tr><tr><td class=\"PType first\">StringTable&lt;<span class=\"SHKeyword\">byte</span>&gt;[]&nbsp;</td><td class=\"PName last\">tables,</td></tr><tr><td class=\"PType first\">List&lt;<span class=\"SHKeyword\">string</span>&gt;[]&nbsp;</td><td class=\"PName last\">conversionLists</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Saves Parser.nd.&nbsp; Throws an exception if unsuccessful.</div></div>",886:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype886\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static private void</span> SaveBinaryFile_WriteSet(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">BinaryFile&nbsp;</td><td class=\"PName last\">file,</td></tr><tr><td class=\"PType first\">StringSet&nbsp;</td><td class=\"PName last\">set</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">A helper function used only by SaveBinaryFile() which writes out the StringSet values followed by a null string.</div></div>",887:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype887\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static private void</span> SaveBinaryFile_WriteTable(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">BinaryFile&nbsp;</td><td class=\"PName last\">file,</td></tr><tr><td class=\"PType first\">StringTable&lt;<span class=\"SHKeyword\">byte</span>&gt;&nbsp;</td><td class=\"PName last\">table</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">A helper function used only by SaveBinaryFile() which writes out the StringTable values followed by a null string.</div></div>",888:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype888\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static private void</span> SaveBinaryFile_WriteConversionList(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">BinaryFile&nbsp;</td><td class=\"PName last\">file,</td></tr><tr><td class=\"PType first\">List&lt;<span class=\"SHKeyword\">string</span>&gt;&nbsp;</td><td class=\"PName last\">conversionList</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">A helper function used only by SaveBinaryFile() which writes out the conversion list values followed by a null string.</div></div>",890:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype890\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> StringSet[] sets</div><div class=\"TTSummary\">An array of StringSets corresponding to the sets in Parser.txt.&nbsp; Use SetIndex for indexes to get particular sets.</div></div>",891:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype891\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> StringTable&lt;<span class=\"SHKeyword\">byte</span>&gt;[] tables</div><div class=\"TTSummary\">An array of StringTables corresponding to the tables in Parser.txt.&nbsp; The values are bytes but will be safe to blindly cast to their respective enums because the values will have been validated when the files were loaded.</div></div>",892:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype892\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> List&lt;<span class=\"SHKeyword\">string</span>&gt;[] conversionLists</div><div class=\"TTSummary\">An array of string lists corresponding to the conversion lists in Parser.txt.&nbsp; Each string list is made up of string pairs where the first are the keys and the second are the values or null.&nbsp; Everything will be in lowercase and canonically composed in Unicode (FormC).&nbsp; Use ConversionListIndex for indexes to get particular tables.</div></div>",893:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype893\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected static char</span>[] ParenthesesChars</div><div class=\"TTSummary\">An array of the parentheses characters, for use with IndexOfAny(char[]).</div></div>",894:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype894\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected static</span> LineEndProbablyEndsSentence LineEndProbablyEndsSentenceRegex</div></div>",895:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype895\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected static</span> AcceptableBeforeOpeningTag AcceptableBeforeOpeningTagRegex</div></div>",896:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype896\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected static</span> AcceptableAfterClosingTag AcceptableAfterClosingTagRegex</div></div>",897:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype897\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected static</span> AcceptableAfterInlineImage AcceptableAfterInlineImageRegex</div></div>",898:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype898\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected static</span> AcceptableURLProtocolCharacters AcceptableURLProtocolCharactersRegex</div></div>",899:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype899\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected static</span> StartsWithURLProtocol StartsWithURLProtocolRegex</div></div>",900:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype900\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected static</span> URLAnywhereInLine URLAnywhereInLineRegex</div></div>",901:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype901\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected static</span> EMailAnywhereInLine EMailAnywhereInLineRegex</div></div>",902:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype902\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected static</span> EMail EMailRegex</div></div>"});