NDSummary.OnToolTipsLoaded("CSharpClass:CodeClear.NaturalDocs.Engine.CodeDB.Lock",{100:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype100\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;CodeDB.</span>&#8203;Lock</div></div></div><div class=\"TTSummary\">A struct to encapsulate the CodeDB database lock.</div></div>",101:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype101\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> Lock ()</div></div>",102:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype102\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> GetReadOnlyLock (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">priority</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Acquires a lock for reading.&nbsp; This lock can NOT be upgraded to a write lock.&nbsp; If you need the possibility of writing as well you must use GetReadPossibleWriteLock() instead.</div></div>",103:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype103\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> GetReadPossibleWriteLock (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">priority</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Acquires a lock for reading with the possibility of upgrading it to a read/write lock in the future.&nbsp; The database state cannot change between when this lock is acquired and when it is upgraded.</div></div>",104:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype104\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> UpgradeToReadWriteLock (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">priority</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Upgrades a read/possible write lock to a read/write lock.&nbsp; You can NOT use this function if you originally acquired a read-only lock.&nbsp; The database state is guaranteed not to change between when the read/possible write lock was acquired and when this function returns.</div></div>",105:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype105\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> DowngradeToReadPossibleWriteLock (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">priority</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Downgrades a read/write lock to a read/possible write lock.&nbsp; This allows other threads to read from the database again, but still doesn\'t allow anything that could change its state because this lock may need to be upgraded to a reader/writer lock again.</div></div>",106:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype106\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> ReleaseReadOnlyLock (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">priority</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Releases a read-only lock.</div></div>",107:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype107\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> ReleaseReadPossibleWriteLock (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">priority</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Releases a read/possible write lock that is not upgraded to a read/write lock.&nbsp; If you upgraded it and didn\'t downgrade it back, use ReleaseReadWriteLock() instead.</div></div>",108:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype108\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> ReleaseReadWriteLock (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">priority</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Releases a read/write lock.</div></div>",110:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype110\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> IsLocked { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Whether there are any locks currently held.</div></div>",112:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype112\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected enum</span> State : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">The state of the lock.&nbsp; Each value is higher than the previous so you can use operators like &lt;=.</div></div>",119:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype119\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected int</span> activeLocks</div><div class=\"TTSummary\">The number of active locks, regardless of type.</div></div>",120:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype120\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected int</span> waitingPriorityLocks</div><div class=\"TTSummary\">The number of priority locks in the waiting state.</div></div>",121:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype121\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> State state</div><div class=\"TTSummary\">The State of the lock.</div></div>",122:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype122\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected object</span> monitor</div><div class=\"TTSummary\">The locking object used with the monitor functions.</div></div>"});