NDSummary.OnToolTipsLoaded("CSharpClass:CodeClear.NaturalDocs.Engine.CodeDB.IDLookupCache",{93:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype93\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;CodeDB.</span>&#8203;IDLookupCache&#8203;<span class=\"TemplateSignature\">&lt;LookupType&gt;</span></div><div class=\"CPPostPrototypeLine\"><span class=\"SHKeyword\">where</span> LookupType: Collections.ILookupKey</div></div></div><div class=\"TTSummary\">A class that provides a local cache of string to ID mappings.&nbsp; The string class must implement Collections.ILookupKey.</div></div>",95:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype95\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> Add (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">LookupType&nbsp;</td><td class=\"PName last\">key,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">id</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Adds a new ID to the table.&nbsp; If the key already existed, the ID must match the existing value or it will throw an exception.&nbsp; You cannot add the null key.</div></div>",96:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype96\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> Remove (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">LookupType&nbsp;</td><td class=\"PName last\">key</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Removes a value from the table.&nbsp; Will not throw an exception if it did not exist.</div></div>",97:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype97\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> Contains (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">LookupType&nbsp;</td><td class=\"PName last\">key</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the table contains a specific key.&nbsp; Will always return true for null.</div></div>",99:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype99\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public int this</span> [</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">LookupType&nbsp;</td><td class=\"PName last\">key</td></tr></table></td><td class=\"PAfterParameters\">] { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</td></tr></table></div><div class=\"TTSummary\">An index operator.&nbsp; When getting, this will throw an exception if the key doesn\'t exist.&nbsp; Getting a null key will always return zero.&nbsp; When setting, if there\'s a preexisting value for the key it must match the new value.&nbsp; You cannot set a null key to anything other than zero.</div></div>"});