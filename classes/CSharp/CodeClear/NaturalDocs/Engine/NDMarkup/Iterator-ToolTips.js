NDContentPage.OnToolTipsLoaded({226:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype226\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Collections.</span>&#8203;StringTable&#8203;<span class=\"TemplateSignature\">&lt;ObjectType&gt;</span></div></div></div><div class=\"TTSummary\">A generic lookup table for mapping strings to other objects.&nbsp; This is preferable to a Dictionary&lt;string, object&gt; class because:</div></div>",2232:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype2232\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> ElementType : <span class=\"SHKeyword\">byte</span></div></div>",2241:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2241\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> AppendTo (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">StringBuilder&nbsp;</td><td class=\"PName last\">stringBuilder</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Appends the current element string to the passed StringBuilder.&nbsp; This is more efficient than appending String because it works from the original memory instead of making an intermediate copy.</div></div>",2245:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype2245\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> ElementType Type { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The type of content the iterator is currently on.</div></div>",2247:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype2247\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> String { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Returns the element contents as a string.&nbsp; This allocates a copy of the string section, so whenever possible you should avoid this property and use things like AppendTo().&nbsp; These functions are more efficient because they work off the original memory instead of making an intermediate copy.</div></div>",2255:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype2255\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private string</span> content</div><div class=\"TTSummary\">The &lt;NDMarkup&gt;-formatted string being iterated over.</div></div>",2257:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype2257\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private</span> ElementType type</div><div class=\"TTSummary\">The current element.</div></div>",2258:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype2258\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private int</span> length</div><div class=\"TTSummary\">The length of the current element.</div></div>",2259:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype2259\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private bool</span> isOpeningTag</div><div class=\"TTSummary\">If the Type is a tag, whether it is an opening or closing tag.&nbsp; The value is undefined if the iterator is on a non-tag element or a standalone tag element.</div></div>"});