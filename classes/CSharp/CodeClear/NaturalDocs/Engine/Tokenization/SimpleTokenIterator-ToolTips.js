NDContentPage.OnToolTipsLoaded({3263:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3263\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> FundamentalType : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">The type of token it is on the most basic level.</div></div>",3264:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">Returned when the token iterator is out of bounds.</div></div>",3323:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3323\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;Tokenizer</div></div></div><div class=\"TTSummary\">A class for dividing a block of text into easily navigable tokens.&nbsp; See FundamentalType for a description of how they are divided up by default.</div></div>",3383:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3383\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;SimpleTokenIterator</div></div></div><div class=\"TTSummary\">An iterator that walks through an untokenized string in a similar manner to TokenIterator.&nbsp; It figures out tokens on the fly and is useful for comparing TokenIterators to simple strings where having a Tokenizer would be overkill.&nbsp; However, it contains only a small subset of the functionality in TokenIterator and isn\'t efficient for serious parsing.</div></div>",3389:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3389\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> MatchesToken (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">text,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">ignoreCase&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">false</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the passed string matches the current token.&nbsp; The string must match the entire token, so &quot;some&quot; won\'t match &quot;something&quot;.&nbsp; Returns false if the iterator is out of bounds.</div></div>",3397:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3397\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> FundamentalType FundamentalType { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The FundamentalType of the current token, or FundamentalType.Null if the iterator is out of bounds.&nbsp; It cannot be changed.</div></div>",3398:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3398\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> RawText { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The string that this iterator is navigating through.</div></div>",3399:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3399\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public int</span> RawTextIndex { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The offset of the current token into RawText.&nbsp; Will be zero if it went past the beginning, or the index one past the last character if it went past the end.</div></div>",3400:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3400\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public int</span> RawTextLength { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The length of the current token in characters, or zero if the iterator is out of bounds.</div></div>",3412:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3412\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private string</span> rawText</div><div class=\"TTSummary\">The string associated with this iterator.</div></div>",3413:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3413\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private int</span> rawTextIndex</div><div class=\"TTSummary\">The current index into rawText.</div></div>",3414:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3414\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private int</span> tokenLength</div><div class=\"TTSummary\">The length of the current token.</div></div>",3415:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3415\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;TokenIterator</div></div></div><div class=\"TTSummary\">An iterator for efficiently walking through the tokens in Tokenizer while keeping track of the line number and offset into the raw text.</div></div>"});