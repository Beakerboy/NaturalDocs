NDSummary.OnToolTipsLoaded("CSharpClass:CodeClear.NaturalDocs.Engine.Tokenization.Tokenizer",{3323:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3323\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;Tokenizer</div></div></div><div class=\"TTSummary\">A class for dividing a block of text into easily navigable tokens.&nbsp; See FundamentalType for a description of how they are divided up by default.</div></div>",3325:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3325\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> Tokenizer (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">input&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName\">startingLineNumber&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHNumber\">1</span>,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName\">tabWidth&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHNumber\">4</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Creates a tokenizer from the passed string.&nbsp; If the string doesn\'t come from the beginning of the file you can pass the line number it appears at.</div></div>",3326:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3326\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> Tokenizer CreateFromIterators (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">end</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Creates a new tokenizer from the range between two TokenIterators.&nbsp; The token the ending iterator is on is not included in the range.&nbsp; The new tokenizer has a copy of the memory and is thus independent.&nbsp; This is faster than creating a new tokenizer around a substring of the raw text because it doesn\'t need to be tokenized all over again.&nbsp; It also carries over any defined token information like CommentParsingTypes.</div></div>",3327:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3327\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> Tokenizer CreateFromIterators (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">LineIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PType first\">LineIterator&nbsp;</td><td class=\"PName last\">end</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Creates a new tokenizer from the range between two LineIterators.&nbsp; The line the ending iterator is on is not included in the range.&nbsp; The new tokenizer has a copy of the memory and is thus independent.&nbsp; This is faster than creating a new tokenizer around a substring of the raw text because it doesn\'t need to be tokenized all over again.&nbsp; It also carries over any defined token information like CommentParsingTypes.</div></div>",3328:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3328\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public string</span> TextBetween (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">end</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the text between the two passed iterators.&nbsp; If you plan to add it to a StringBuilder, it is more efficient to call AppendTextBetweenTo() instead because that won\'t require the creation of an intermediate string.</div></div>",3329:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3329\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> AppendTextBetweenTo (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">end,</td></tr><tr><td class=\"PModifierQualifier first\">System.Text.</td><td class=\"PType\">StringBuilder&nbsp;</td><td class=\"PName last\">output</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Appends the text between the two passed iterators to the passed StringBuilder.&nbsp; This is more effecient than appending the result from TextBetween() because it transfers directly from the raw text to the StringBuilder without creating an intermediate string.</div></div>",3330:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3330\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> Match MatchTextBetween (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">System.Text.RegularExpressions.</td><td class=\"PType\">Regex&nbsp;</td><td class=\"PName last\">regex,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">end</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Runs the passed regular expression on the text between the two iterators and returns the result.</div></div>",3331:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3331\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> ContainsTextBetween (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">searchText,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">ignoreCase,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">end</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the text between the two iterators contains the passed string.</div></div>",3332:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3332\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> EqualsTextBetween (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">searchText,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">ignoreCase,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">end</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the text between the two iterators matches the passed string exactly.</div></div>",3333:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3333\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> FindTokenBetween (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">text,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">ignoreCase,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">end,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">result</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Attempts to find the passed string as a token between the two iterators, and set a TokenIterator at its position if successful.&nbsp; The string must match the entire token, so &quot;some&quot; will not match &quot;something&quot;.</div></div>",3334:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3334\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> FindTokensBetween (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">text,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">ignoreCase,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">end,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">result</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Attempts to find the passed string between the two iterators, and sets a TokenIterator at its position if successful.&nbsp; This function can cross token boundaries, so you can search for &quot;&lt;&lt;&quot; even though that would normally be two tokens.&nbsp; The result must match complete tokens though, so &quot;&lt;&lt; some&quot; will not match &quot;&lt;&lt; something&quot;.</div></div>",3336:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3336\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> FundamentalType FundamentalTypeAt (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">tokenIndex,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">rawTextIndex</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the FundamentalType at the passed location.</div></div>",3337:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3337\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> CommentParsingType CommentParsingTypeAt (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">tokenIndex</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the CommentParsingType at the passed token index.</div></div>",3338:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3338\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> SetCommentParsingTypeAt (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">tokenIndex,</td></tr><tr><td class=\"PType first\">CommentParsingType&nbsp;</td><td class=\"PName last\">type</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Changes the CommentParsingType at the passed token index.</div></div>",3339:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3339\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> SetCommentParsingTypeBetween (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">startingIndex,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">endingIndex,</td></tr><tr><td class=\"PType first\">CommentParsingType&nbsp;</td><td class=\"PName last\">type</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Changes the CommentParsingType of all the tokens between the two passed indexes.&nbsp; The token at the ending index will not be changed.</div></div>",3340:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3340\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> SetCommentParsingTypeBetween (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">startingIterator,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">endingIterator,</td></tr><tr><td class=\"PType first\">CommentParsingType&nbsp;</td><td class=\"PName last\">type</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Changes the CommentParsingType of all the tokens between the two passed iterators.&nbsp; The token at the ending iterator will not be changed.</div></div>",3341:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3341\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> SyntaxHighlightingType SyntaxHighlightingTypeAt (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">tokenIndex</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the SyntaxHighlightingType at the passed token index.</div></div>",3342:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3342\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> SetSyntaxHighlightingTypeAt (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">tokenIndex,</td></tr><tr><td class=\"PType first\">SyntaxHighlightingType&nbsp;</td><td class=\"PName last\">type</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Changes the SyntaxHighlightingType at the passed token index.</div></div>",3343:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3343\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> SetSyntaxHighlightingTypeBetween (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">startingIndex,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">endingIndex,</td></tr><tr><td class=\"PType first\">SyntaxHighlightingType&nbsp;</td><td class=\"PName last\">type</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Changes the SyntaxHighlightingType of all the tokens between the two passed indexes.&nbsp; The token at the ending index will not be changed.</div></div>",3344:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3344\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> SetSyntaxHighlightingTypeBetween (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">startingIterator,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">endingIterator,</td></tr><tr><td class=\"PType first\">SyntaxHighlightingType&nbsp;</td><td class=\"PName last\">type</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Changes the SyntaxHighlightingType of all the tokens between the two passed iterators.&nbsp; The token at the ending iterator will not be changed.</div></div>",3345:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3345\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> PrototypeParsingType PrototypeParsingTypeAt (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">tokenIndex</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the PrototypeParsingType at the passed token index.</div></div>",3346:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3346\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> SetPrototypeParsingTypeAt (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">tokenIndex,</td></tr><tr><td class=\"PType first\">PrototypeParsingType&nbsp;</td><td class=\"PName last\">type</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Changes the PrototypeParsingType at the passed token index.</div></div>",3347:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3347\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> SetPrototypeParsingTypeBetween (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">startingIndex,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">endingIndex,</td></tr><tr><td class=\"PType first\">PrototypeParsingType&nbsp;</td><td class=\"PName last\">type</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Changes the PrototypeParsingType of all the tokens between the two passed indexes.&nbsp; The token at the ending index will not be changed.</div></div>",3348:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3348\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> SetPrototypeParsingTypeBetween (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">startingIterator,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">endingIterator,</td></tr><tr><td class=\"PType first\">PrototypeParsingType&nbsp;</td><td class=\"PName last\">type</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Changes the PrototypeParsingType of all the tokens between the two passed iterators.&nbsp; The token at the ending iterator will not be changed.</div></div>",3349:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3349\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> ClassPrototypeParsingType ClassPrototypeParsingTypeAt (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">tokenIndex</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the ClassPrototypeParsingType at the passed token index.</div></div>",3350:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3350\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> SetClassPrototypeParsingTypeAt (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">tokenIndex,</td></tr><tr><td class=\"PType first\">ClassPrototypeParsingType&nbsp;</td><td class=\"PName last\">type</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Changes the ClassPrototypeParsingType at the passed token index.</div></div>",3351:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3351\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> SetClassPrototypeParsingTypeBetween (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">startingIndex,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">endingIndex,</td></tr><tr><td class=\"PType first\">ClassPrototypeParsingType&nbsp;</td><td class=\"PName last\">type</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Changes the ClassPrototypeParsingType of all the tokens between the two passed indexes.&nbsp; The token at the ending index will not be changed.</div></div>",3352:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3352\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> SetClassPrototypeParsingTypeBetween (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">startingIterator,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">endingIterator,</td></tr><tr><td class=\"PType first\">ClassPrototypeParsingType&nbsp;</td><td class=\"PName last\">type</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Changes the ClassPrototypeParsingType of all the tokens between the two passed iterators.&nbsp; The token at the ending iterator will not be changed.</div></div>",3354:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3354\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static public</span> FundamentalType FundamentalTypeOf (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">character</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the FundamentalType of the passed character.</div></div>",3356:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3356\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> Load (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">input</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Loads and tokenizes the passed string.</div></div>",3357:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3357\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected void</span> CalculateLines ()</div><div class=\"TTSummary\">Calculates the Lines list for the current tokens.</div></div>",3359:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3359\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> RawText { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The raw, unadulterated input string.</div></div>",3360:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3360\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public int</span> StartingLineNumber { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The starting line number for the tokenized text.</div></div>",3361:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3361\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> TokenIterator FirstToken { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">A TokenIterator set to the first token of this object.</div></div>",3362:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3362\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> TokenIterator LastToken { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">A TokenIterator set to one past the last token of this object.</div></div>",3363:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3363\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public int</span> TokenCount { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The number of tokens in this object.</div></div>",3364:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3364\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> LineIterator FirstLine { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">A LineIterator set to the first line in this object.</div></div>",3365:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3365\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> LineIterator LastLine { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">A LineIterator set to the one past the last line in this object.</div></div>",3366:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3366\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> HasSyntaxHighlighting { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Whether syntax highlighting has been applied.</div></div>",3367:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3367\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public int</span> TabWidth { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The number of spaces in a tab.</div></div>",3369:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3369\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected internal</span> IList&lt;<span class=\"SHKeyword\">byte</span>&gt; TokenLengths { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The list of token lengths.</div></div>",3370:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3370\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected internal</span> IList&lt;Line&gt; Lines { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The list of Lines.</div></div>",3372:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3372\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected string</span> rawText</div><div class=\"TTSummary\">The raw, unadulterated input text.</div></div>",3373:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3373\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> List&lt;<span class=\"SHKeyword\">byte</span>&gt; tokenLengths</div><div class=\"TTSummary\">The list of token lengths generated for rawText based on FundamentalTypes.</div></div>",3374:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3374\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> CommentParsingType[] commentParsingTypes</div><div class=\"TTSummary\">A list of CommentParsingTypes that are set for each token.&nbsp; The array indexes correspond to those in tokenLengths.&nbsp; This is created on demand, so if none have been assigned this will be null.</div></div>",3375:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3375\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> SyntaxHighlightingType[] syntaxHighlightingTypes</div><div class=\"TTSummary\">A list of SyntaxHighlightingTypes that are set for each token.&nbsp; The array indexes correspond to those in tokenLengths.&nbsp; This is created on demand, so if none have been assigned this will be null.</div></div>",3376:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3376\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> PrototypeParsingType[] prototypeParsingTypes</div><div class=\"TTSummary\">A list of PrototypeParsingTypes that are set for each token.&nbsp; The array indexes correspond to those in tokenLengths.&nbsp; This is created on demand, so if none have been assigned this will be null.</div></div>",3377:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3377\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> ClassPrototypeParsingType[] classPrototypeParsingTypes</div><div class=\"TTSummary\">A list of ClassPrototypeParsingTypes that are set for each token.&nbsp; The array indexes correspond to those in tokenLengths.&nbsp; This is created on demand, so if none have been assigned this will be null.</div></div>",3378:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3378\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> List&lt;Line&gt; lines</div><div class=\"TTSummary\">The list of Lines generated for rawText.&nbsp; This is generated on demand so this variable will be null if it hasn\'t been done yet.</div></div>",3379:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3379\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected int</span> startingLineNumber</div></div>",3380:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3380\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected int</span> tabWidth</div></div>",3382:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3382\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">internal static char</span>[] lineBreakChars</div><div class=\"TTSummary\">An array of all the characters that count as FundamentalType.LineBreak.</div></div>"});