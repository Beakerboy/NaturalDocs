NDSummary.OnToolTipsLoaded("CSharpClass:CodeClear.NaturalDocs.Engine.Tokenization.LineIterator",{3485:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3485\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;LineIterator</div></div></div><div class=\"TTSummary\">An iterator to go through a Tokenizer line by line instead of token by token.</div></div>",3487:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3487\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> Next (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName\">count&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHNumber\">1</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Moves forward the specified number of lines, returning false if we\'ve moved past the end.&nbsp; You can use this with negative numbers to move backwards.</div></div>",3488:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3488\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> Previous (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName\">count&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHNumber\">1</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Moves backwards the specified number of lines, returning false if we\'ve move past the beginning.&nbsp; You can use this with negative numbers to move forward.</div></div>",3489:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3489\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> TokenIterator FirstToken (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">LineBoundsMode&nbsp;</td><td class=\"PName last\">boundsMode</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns a TokenIterator at the beginning of the current line.&nbsp; If the iterator is out of bounds it will be set to one past the last token, regardless of which edge it has gone off.</div></div>",3490:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3490\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> GetBounds (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">LineBoundsMode&nbsp;</td><td class=\"PName last\">boundsMode,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">lineStart,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">lineEnd</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Sets two TokenIterators to the beginning and end of the current line.&nbsp; If the iterator is out of bounds they will be equal.</div></div>",3491:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3491\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> GetRawTextBounds (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">LineBoundsMode&nbsp;</td><td class=\"PName last\">boundsMode,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">lineStartIndex,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">lineEndIndex</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the location of the line in Tokenizer.RawText.</div></div>",3492:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3492\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public string</span> String (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">LineBoundsMode&nbsp;</td><td class=\"PName last\">boundsMode</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the line as a string.&nbsp; Note that this allocates a copy of the memory.&nbsp; For efficiency, it\'s preferrable to work on the original memory whenever possible with functions like Match() and AppendTo().</div></div>",3493:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3493\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> AppendTo (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">System.Text.</td><td class=\"PType\">StringBuilder&nbsp;</td><td class=\"PName last\">target,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">LineBoundsMode&nbsp;</td><td class=\"PName last\">boundsMode</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Appends the line to the passed StringBuilder.&nbsp; This works from the original memory so it\'s more efficent than appending the result from String().</div></div>",3494:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3494\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> IsEmpty (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">LineBoundsMode&nbsp;</td><td class=\"PName last\">boundsMode</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the current line is empty according to the LineBoundsMode.</div></div>",3495:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3495\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public int</span> Indent (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">LineBoundsMode&nbsp;</td><td class=\"PName last\">boundsMode</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the indent of the current line content according to the LineBoundsMode, expanding tabs.</div></div>",3496:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3496\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> System.Text.RegularExpressions.Match Match (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">System.Text.RegularExpressions.</td><td class=\"PType\">Regex&nbsp;</td><td class=\"PName last\">regex,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">LineBoundsMode&nbsp;</td><td class=\"PName last\">boundsMode</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Applies a regular expression to the line and returns the Match object as if Regex.Match() was called.&nbsp; If the iterator is out of bounds it will be applied to an empty string.</div></div>",3497:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3497\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> FindToken (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">text,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">ignoreCase,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">LineBoundsMode&nbsp;</td><td class=\"PName last\">boundsMode,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">result</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Attempts to find the passed string as a token in the line, and set a TokenIterator at its position if successful.&nbsp; The string must match the entire token, so &quot;some&quot; will not match &quot;something&quot;.</div></div>",3498:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3498\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> FindAcrossTokens (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">text,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">ignoreCase,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">LineBoundsMode&nbsp;</td><td class=\"PName last\">boundsMode,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">result</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Attempts to find the passed string in the line, and sets a TokenIterator at its position if successful.&nbsp; This function can cross token boundaries, so you can search for &quot;&lt;&lt;&quot; even though that would normally be two tokens.&nbsp; The result must match complete tokens though, so &quot;&lt;&lt; some&quot; will not match &quot;&lt;&lt; something&quot;.</div></div>",3500:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3500\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">internal</span> LineIterator (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">newTokenizer,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">newLineIndex,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">newTokenIndex,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">newRawTextIndex</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Creates a new iterator from the passed parameters.</div></div>",3501:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3501\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">internal void</span> CalculateBounds (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">LineBoundsMode&nbsp;</td><td class=\"PName last\">boundsMode,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">rawTextStart,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">rawTextEnd,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">tokenStart,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">tokenEnd</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Determines and returns the bounds of the current line according to the LineBoundsMode.</div></div>",3502:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3502\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">internal bool</span> IsSkippable (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">testTokenIndex,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">testRawTextIndex,</td></tr><tr><td class=\"PType first\">LineBoundsMode&nbsp;</td><td class=\"PName last\">boundsMode</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the token at the passed index should be skipped based on the LineBoundsMode.</div></div>",3504:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3504\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public int</span> LineNumber { <span class=\"SHKeyword\">get</span> }</div></div>",3505:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3505\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> IsInBounds { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Whether the iterator is not past the beginning or end of the tokens.</div></div>",3506:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3506\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> Tokenizer Tokenizer { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The Tokenizer associated with this iterator.</div></div>",3508:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3508\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">internal int</span> RawTextIndex { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The index into Tokenizer.RawText of the beginning of the current line.</div></div>",3509:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3509\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">internal int</span> TokenIndex { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The token index of the beginning of the current line.</div></div>",3510:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3510\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">internal int</span> LineIndex { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The current line\'s index into Tokenizer.Lines.</div></div>",3512:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3512\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public override bool</span> Equals (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">other</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3513:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3513\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public override int</span> GetHashCode ()</div></div>",3514:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3514\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>== (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">LineIterator&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\">LineIterator&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3515:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3515\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>!= (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">LineIterator&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\">LineIterator&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3516:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3516\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>&gt; (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">LineIterator&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\">LineIterator&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3517:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3517\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>&gt;= (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">LineIterator&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\">LineIterator&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3518:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3518\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>&lt; (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">LineIterator&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\">LineIterator&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3519:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3519\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>&lt;= (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">LineIterator&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\">LineIterator&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3521:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3521\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private</span> Tokenizer tokenizer</div></div>",3522:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3522\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private int</span> lineIndex</div><div class=\"TTSummary\">Remember that this is an index, not a line number.</div></div>",3523:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3523\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private int</span> tokenIndex</div></div>",3524:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3524\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private int</span> rawTextIndex</div></div>"});