NDSummary.OnToolTipsLoaded("CSharpClass:CodeClear.NaturalDocs.Engine.Output.ResourceProcessor",{2842:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype2842\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public abstract</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Output.</span>&#8203;ResourceProcessor</div></div></div><div class=\"TTSummary\">A base class used for shared functionality when processing JS and CSS files.</div></div>",2844:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2844\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">static</span> ResourceProcessor ()</div></div>",2845:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2845\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> ResourceProcessor (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">name</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",2846:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2846\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">abstract public string</span> Process (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">input,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">shrink&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">true</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",2847:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2847\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected string</span> FindIncludeInOutput (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;PossibleDocumentationComment&gt;&nbsp;</td><td class=\"PName last\">comments</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Extracts and returns all comment content marked &quot;include in output&quot;.&nbsp; All comment symbols and extra indents will be removed.&nbsp; Returns null if none of the comments have any.</div></div>",2848:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2848\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected string</span> FindIncludeInOutput (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">PossibleDocumentationComment&nbsp;</td><td class=\"PName last\">comment</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Extracts and returns any comment content marked &quot;include in output&quot;.&nbsp; All comment symbols and extra indents will be removed.&nbsp; Returns null if the comment doesn\'t have any.</div></div>",2849:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2849\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected</span> StringToStringTable FindSubstitutions (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">source</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Searches the source for substitution definitions and returns them as a StringToStringTable.</div></div>",2850:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2850\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected</span> Tokenizer ApplySubstitutions (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName\">source,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PType first\">StringToStringTable&nbsp;</td><td class=\"PName\">substitutions,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">applyNestedSubstitutions&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">true</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Finds all substitutions in the source that match those in the table and replaces them with their values.&nbsp; Will also comment out any substitution definitions found.</div></div>",2851:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2851\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected string</span> ApplyNestedSubstitutions (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">substitution,</td></tr><tr><td class=\"PType first\">StringToStringTable&nbsp;</td><td class=\"PName last\">substitutions</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",2853:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2853\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual void</span> GenericSkip (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">iterator</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Moves the iterator ahead one code element, which could be a single token, whitespace, an entire comment, or an entire string.&nbsp; The important part is that this skips comments and strings all in one step so that anything appearing inside them will not be misinterpreted as code.</div></div>",2854:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2854\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipWhitespace (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">iterator</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on whitespace or a comment, skips over it and returns true.&nbsp; Otherwise leaves the iterator alone and returns false.</div></div>",2855:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2855\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipComment (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">iterator</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on the opening symbol of any kind of comment, skips over it and returns true.&nbsp; Otherwise leaves the iterator alone and returns false.</div></div>",2856:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2856\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipLineComment (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">iterator</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on the opening symbol of a line comment, skips over it and returns true.&nbsp; Otherwise leaves the iterator alone and returns false.</div></div>",2857:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2857\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipLineComment (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">iterator,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">symbol</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on the opening symbol of a line comment, skips over it and returns true.&nbsp; Otherwise leaves the iterator alone and returns false.</div></div>",2858:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2858\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipBlockComment (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">iterator</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on the opening symbol of a block comment, skips over it and returns true.&nbsp; Otherwise leaves the iterator alone and returns false.</div></div>",2859:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2859\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipBlockComment (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">iterator,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">openingSymbol,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">closingSymbol</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on the opening symbol of a block comment, skips over it and returns true.&nbsp; Otherwise leaves the iterator alone and returns false.</div></div>",2860:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2860\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipString (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">iterator</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on the opening quote character of a string, skips over it and returns true.&nbsp; Otherwise leaves the iterator alone and returns false.</div></div>",2861:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2861\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipString (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">iterator,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">quoteChar</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on the opening quote character of a string, skips over it and returns true.&nbsp; Otherwise leaves the iterator alone and returns false.</div></div>",2862:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2862\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipSubstitutionIdentifier (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">iterator,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">identifier</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on a valid substitution identifier, advances it past it, returns it, and returns true.&nbsp; Otherwise the iterator will be left alone and it will return false.</div></div>",2863:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2863\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipLocaleSubstitutionIdentifier (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">iterator,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">identifier,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">localeIdentifier</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on a valid locale substitution identifier, advances it past it, returns it, and returns true.&nbsp; Otherwise the iterator will be left alone and it will return false.</div></div>",2864:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2864\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipSubstitutionDefinition (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">iterator,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">identifier,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">value,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">declaration</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on a valid substitution definition, advances it past it, determines its properties, and returns true.&nbsp; Otherwise the iterator will be left alone and it will return false.</div></div>",2866:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype2866\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public char</span>[] QuoteCharacters { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div>",2868:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype2868\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected char</span>[] quoteCharacters</div></div>",2870:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype2870\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected static</span> Regex.Comments.IncludeInOutput IncludeInOutputRegex</div></div>",2871:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype2871\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected static char</span>[] SubstitutionIdentifierPrefixes</div></div>"});