NDSummary.OnToolTipsLoaded("CSharpClass:CodeClear.NaturalDocs.Engine.Symbols.ContextString",{3206:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3206\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Symbols.</span>&#8203;ContextString</div></div></div><div class=\"TTSummary\">A struct encapsulating a context string, which is a normalized way of representing what scope and &quot;using&quot; statements are active at a given point.</div></div>",3208:"<div class=\"NDToolTip TConstant LCSharp\"><div id=\"NDPrototype3208\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public const char</span> SeparatorChar</div><div class=\"TTSummary\">The character used to separate string components.</div></div>",3210:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3210\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private</span> ContextString (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">newContextString</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3211:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3211\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static public</span> ContextString FromExportedString (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">exportedContextString</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Creates a ContextString from the passed string which originally came from another ContextString object.&nbsp; This assumes the string is already be in the proper format.&nbsp; Only use this when retrieving ContextStrings that were stored as plain text in a database or other data file.</div></div>",3212:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3212\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> IList&lt;UsingString&gt; GetUsingStatements()</div><div class=\"TTSummary\">Returns the &quot;using&quot; statements as a list, or null if there are none.</div></div>",3213:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3213\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> AddUsingStatement (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">UsingString&nbsp;</td><td class=\"PName last\">usingStatement</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Adds a &quot;using&quot; statement to the context.&nbsp; It does not remove or replace any of the existing ones.</div></div>",3214:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3214\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> InheritUsingStatementsFrom (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">ContextString&nbsp;</td><td class=\"PName last\">other</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Adds all the &quot;using&quot; statements from the passed context to this one <u>before</u> the existing ones.&nbsp; It will not check for or remove duplicates.</div></div>",3215:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3215\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public void</span> ClearUsingStatements()</div><div class=\"TTSummary\">Removes all &quot;using&quot; statements from the context.</div></div>",3216:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3216\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> GetRawTextScope (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">index,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">length</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Retrieves the bounds of the scope part of RawText.&nbsp; Returns true if there is a scope, false if it\'s global.&nbsp; This function is useful if you need to compare something to many ContextStrings and don\'t want to constantly create intermediate strings.</div></div>",3217:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3217\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> GetRawTextUsingStatement (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">statementIndex,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">rawTextIndex,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">rawTextLength</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Retrieves the RawText bounds of the selected &quot;using&quot; statement.&nbsp; If there isn\'t a &quot;using&quot; statement for the passed index, it will return false.&nbsp; This function is useful if you need to compare something against many ContextStrings and don\'t want to constantly create intermediate strings and lists.</div></div>",3219:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3219\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> SymbolString Scope { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">The scope as a SymbolString, or null if global.</div></div>",3220:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3220\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> ScopeIsGlobal { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Whether the scope is global.&nbsp; This is more efficient than checking Scope against null as it doesn\'t have to create a SymbolString to return.</div></div>",3221:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3221\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> HasUsingStatements { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Whether the context contains using statements.</div></div>",3222:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3222\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> RawText { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Returns the raw string for use with functions like GetRawTextScope() and GetRawTextUsingStatement().</div></div>",3223:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3223\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> LookupKey { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The key to use with CodeDB.IDLookupCache.</div></div>",3225:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3225\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static implicit operator string</span> (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">ContextString&nbsp;</td><td class=\"PName last\">context</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">A cast operator to covert the context to a string.</div></div>",3226:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3226\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>== (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">ContextString&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3227:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3227\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>!= (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">ContextString&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3228:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3228\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public override string</span> ToString ()</div><div class=\"TTSummary\">Returns the ContextString as a string.</div></div>",3229:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3229\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public override int</span> GetHashCode ()</div></div>",3230:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3230\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public override bool</span> Equals (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">other</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3231:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3231\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public int</span> CompareTo (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">other</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3233:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3233\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private string</span> contextString</div><div class=\"TTSummary\">The context string in normalized form.&nbsp; The first segment separated by SeparatorChar is the scope, and each following segment is a &quot;using&quot; statement.</div></div>"});