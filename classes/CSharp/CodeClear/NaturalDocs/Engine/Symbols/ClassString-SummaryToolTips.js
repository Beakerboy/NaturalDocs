NDSummary.OnToolTipsLoaded("CSharpClass:CodeClear.NaturalDocs.Engine.Symbols.ClassString",{3234:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3234\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Symbols.</span>&#8203;ClassString</div></div></div><div class=\"TTSummary\">A struct encapsulating a class string, which is a normalized way of representing what class a given topic is in.&nbsp; This also covers databases and any other hierarchy that uses a class ID.</div></div>",3236:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3236\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> HierarchyType : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">Which hierarchy the ClassString is for.&nbsp; The numeric values match the values in &lt;CodeDB.Classes.Hierarchy&gt;.</div></div>",3240:"<div class=\"NDToolTip TConstant LCSharp\"><div id=\"NDPrototype3240\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public const char</span> SeparatorChar</div><div class=\"TTSummary\">The character used to separate string components.</div></div>",3242:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3242\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private</span> ClassString (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">newClassString,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">newLookupKey</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3243:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3243\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static public</span> ClassString FromParameters (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">HierarchyType&nbsp;</td><td class=\"PName last\">hierarchy,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">languageID,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">caseSensitive,</td></tr><tr><td class=\"PType first\">SymbolString&nbsp;</td><td class=\"PName last\">symbol</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Creates a ClassString from the passed parameters.</div></div>",3244:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3244\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static public</span> ClassString FromExportedString (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">exportedClassString</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Creates a ClassString from the passed string which originally came from another ClassString object.&nbsp; This assumes the string is already be in the proper format.&nbsp; Only use this when retrieving ClassStrings that were stored as plain text in a database or other data file.</div></div>",3246:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3246\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> SymbolString Symbol { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The class as a SymbolString.</div></div>",3247:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3247\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> HierarchyType Hierarchy { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Which hierarchy the class is a part of.</div></div>",3248:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3248\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public int</span> LanguageID { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The ID of the language the class is associated with, or zero if it\'s irrelevant.</div></div>",3249:"<div class=\"NDToolTip TProperty LCSharp\"><div class=\"TTSummary\">Fooled you.&nbsp; There actually is no CaseSensitive property.&nbsp; You don\'t have to worry about handling case sensitivity yourself, just use LookupKey for comparisons instead.</div></div>",3250:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3250\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> LookupKey { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The key to use with CodeDB.IDLookupCache.</div></div>",3252:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3252\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static implicit operator string</span> (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">ClassString&nbsp;</td><td class=\"PName last\">classString</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">A cast operator to covert the ClassString to a string.</div></div>",3253:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3253\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>== (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">ClassString&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">This compares using LookupKey instead of ToString().</div></div>",3254:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3254\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>!= (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">ClassString&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">This compares using LookupKey instead of ToString().</div></div>",3255:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3255\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public override string</span> ToString ()</div><div class=\"TTSummary\">Returns the ContextString as a string.&nbsp; This is always case sensitive, unlike LookupKey.</div></div>",3256:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3256\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public override int</span> GetHashCode ()</div><div class=\"TTSummary\">This is generated from LookupKey instead of ToString().</div></div>",3257:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3257\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public override bool</span> Equals (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">other</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">This compares using LookupKey instead of ToString().</div></div>",3258:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3258\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public int</span> CompareTo (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">other</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">This compares using LookupKey instead of ToString().</div></div>",3260:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3260\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private string</span> classString</div><div class=\"TTSummary\">The combined class string.</div></div>",3261:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3261\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private string</span> lookupKey</div><div class=\"TTSummary\">If the language is case sensitive, this will be the same as classString.&nbsp; If it\'s not, this will be classString with the SymbolString part in lowercase.</div></div>"});