NDSummary.OnToolTipsLoaded("CSharpClass:CodeClear.NaturalDocs.Engine.Symbols.SymbolString",{3124:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3124\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Symbols.</span>&#8203;SymbolString</div></div></div><div class=\"TTSummary\">A struct encapsulating a symbol string, which is a normalized way of representing a hierarchal code element or topic, such as &quot;PackageA.PackageB.FunctionC&quot;.</div></div>",3126:"<div class=\"NDToolTip TConstant LCSharp\"><div id=\"NDPrototype3126\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public const char</span> SeparatorChar</div><div class=\"TTSummary\">The character used to separate symbol segments.</div></div>",3128:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3128\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private</span> SymbolString (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">newSymbolString</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3129:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3129\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static public</span> SymbolString FromPlainText (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">textSymbol,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">parameters</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Creates a SymbolString from the passed string of plain text.</div></div>",3130:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3130\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static public</span> SymbolString FromPlainText_NoParameters (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">textSymbol</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Creates a SymbolString from the passed string of plain text which is guaranteed to not have parameters or has already had them removed.</div></div>",3131:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3131\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static public</span> SymbolString FromExportedString (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">exportedSymbolString</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Creates a SymbolString from the passed string which originally came from another SymbolString object.&nbsp; This skips the normalization stage because it should already be in the proper format.&nbsp; Only use this when retrieving SymbolStrings that were stored as plain text in a database or other data file.&nbsp; All other uses should call FromPlainText() instead.</div></div>",3132:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3132\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span>[] SplitSegments ()</div><div class=\"TTSummary\">Returns the symbol as an array of individual segments.</div></div>",3133:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3133\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public string</span> FormatWithSeparator (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName last\">newSeparator</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the symbol as a string using the passed separator character.</div></div>",3134:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3134\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public string</span> FormatWithSeparator (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">newSeparator</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the symbol as a string using the passed separator string.</div></div>",3135:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3135\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> StartsWith (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">SymbolString&nbsp;</td><td class=\"PName\">other,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">ignoreCase&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">false</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the start of the symbol matches the passed symbol, such as &quot;PackageA.PackageB.Function&quot; and PackageA.PackageB&quot;.&nbsp; It must match a complete segment, so &quot;PackageA.PackageB.Function&quot; will not match &quot;PackageA.Package&quot;.</div></div>",3136:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3136\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> EndsWith (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">SymbolString&nbsp;</td><td class=\"PName\">other,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">ignoreCase&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">false</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the end of the symbol matches the passed symbol, such as &quot;PackageA.PackageB.Function&quot; and &quot;PackageB.Function&quot;.&nbsp; It must match a complete segment, so &quot;PackageA.PackageB.Function&quot; will not match &quot;B.Function&quot;.</div></div>",3137:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3137\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> EndsWithDuplicate ()</div><div class=\"TTSummary\">Returns whether the last two segments of the symbol match, such as &quot;PackageA.ClassA.ClassA&quot;.&nbsp; This is useful for detecting C-style constructors.</div></div>",3139:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3139\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> EndingSymbol EndingSymbol { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Returns the EndingSymbol of the symbol string.&nbsp; Unlike LastSegment and SymbolStrings in general, EndingSymbols are case-insensitive.&nbsp; So for &quot;PackageA.PackageB.FunctionC&quot; this will return an EndingSymbol for &quot;functionc&quot;.</div></div>",3140:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3140\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> LastSegment { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Returns the last segment of the symbol string.&nbsp; Unlike EndingSymbol this is case sensitive, so for &quot;PackageA.PackageB.FunctionC&quot; this will return &quot;FunctionC&quot;.</div></div>",3141:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3141\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> SymbolString WithoutLastSegment { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Returns the symbol without its last segment, which is its parent scope, or null if there is only one segment.&nbsp; For &quot;PackageA.PackageB.FunctionC&quot; this will return &quot;PackageA.PackageB&quot;.</div></div>",3143:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3143\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static implicit operator string</span> (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">SymbolString&nbsp;</td><td class=\"PName last\">symbol</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">A cast operator to covert the symbol to a string.</div></div>",3144:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3144\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>== (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">SymbolString&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3145:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3145\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span>!= (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">SymbolString&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3146:"<div class=\"NDToolTip TOperator LCSharp\"><div id=\"NDPrototype3146\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static</span> SymbolString <span class=\"SHKeyword\">operator</span>+ (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">SymbolString&nbsp;</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\">SymbolString&nbsp;</td><td class=\"PName last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Concatenates the two SymbolStrings.</div></div>",3147:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3147\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public override string</span> ToString ()</div><div class=\"TTSummary\">Returns the SymbolString as a string.</div></div>",3148:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3148\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public override int</span> GetHashCode ()</div></div>",3149:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3149\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public override bool</span> Equals (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">other</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3150:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3150\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public int</span> CompareTo (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">SymbolString&nbsp;</td><td class=\"PName\">other,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">ignoreCase&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">false</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3151:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3151\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public int</span> CompareTo (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">other</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",3153:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3153\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private void</span> Normalize ()</div><div class=\"TTSummary\">Normalizes symbolString.</div></div>",3155:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3155\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private string</span> symbolString</div><div class=\"TTSummary\">The symbol, <u>always</u> in normalized form.</div></div>",3156:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype3156\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">static private char</span>[] startingSeparatorCharsAndWhitespace</div><div class=\"TTSummary\">An array containing the whitespace characters, separator characters, and the first characters of all the possible text separators.</div></div>"});