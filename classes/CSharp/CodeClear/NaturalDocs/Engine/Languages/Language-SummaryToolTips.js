NDSummary.OnToolTipsLoaded("CSharpClass:CodeClear.NaturalDocs.Engine.Languages.Language",{1786:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1786\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Languages.</span>&#8203;Language</div></div></div><div class=\"TTSummary\">A class encapsulating information about a language.&nbsp; This differs from ConfigFileLanguage in that its meant to represent the final combined settings of a language rather than its entry in a config file.&nbsp; For example, this class doesn\'t store the language\'s extensions or shebang strings.</div></div>",1788:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype1788\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> EnumValues : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">Can be Global, UnderType, or UnderParent.</div></div>",1789:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype1789\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> LanguageType : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">The type of language or file this is.</div></div>",1794:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype1794\" class=\"NDPrototype NoParameterForm\"><div class=\"PPrePrototypeLine\"><span class=\"SHMetadata\">[Flags]</span></div><span class=\"SHKeyword\">protected enum</span> LanguageFlags : <span class=\"SHKeyword\">byte</span></div></div>",1944:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype1944\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> ParseMode : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">What type of processing individual parsing functions will perform.&nbsp; Not every mode is appropriate for every function, but passing an unsupported mode would just be the equivalent of using IterateOnly.</div></div>",1950:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype1950\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> ParseResult : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">The result of a Parse() operation.</div></div>",1955:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype1955\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected enum</span> ValidateElementsMode : <span class=\"SHKeyword\">byte</span></div></div>",1801:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1801\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> Language (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">Languages.</td><td class=\"PType\">Manager&nbsp;</td><td class=\"PName last\">manager,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">name</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Creates a new language object.</div></div>",1802:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1802\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public void</span> GenerateAlternateCommentStyles ()</div><div class=\"TTSummary\">If the language has basic support and they\'re not already defined, generate &lt;JavadocLineCommentStringPairs&gt;, &lt;JavadocBlockCommentStringPairs&gt;, and &lt;XMLLineCommentStrings&gt; automatically from &lt;BlockCommentStringPairs&gt; and &lt;LineCommentStrings&gt;.</div></div>",1961:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1961\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual public</span> ParseResult Parse (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">Path&nbsp;</td><td class=\"PName last\">filePath,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">fileID,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">CancelDelegate&nbsp;</td><td class=\"PName last\">cancelDelegate,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">IList&lt;Topic&gt;&nbsp;</td><td class=\"PName last\">topics,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">LinkSet&nbsp;</td><td class=\"PName last\">classParentLinks</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Parses the passed file and returns it as a list of Topics and class parent Links.&nbsp; Set cancelDelegate for the ability to interrupt parsing, or use Delegates.NeverCancel if that\'s not needed.</div></div>",1962:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1962\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual public</span> ParseResult Parse (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">Tokenizer&nbsp;</td><td class=\"PName last\">source,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">fileID,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">CancelDelegate&nbsp;</td><td class=\"PName last\">cancelDelegate,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">IList&lt;Topic&gt;&nbsp;</td><td class=\"PName last\">topics,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">LinkSet&nbsp;</td><td class=\"PName last\">classParentLinks</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Parses the tokenized source code and returns it as a list of Topics and class parent Links.&nbsp; Set cancelDelegate for the ability to interrupt parsing, or use Delegates.NeverCancel.</div></div>",1963:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1963\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public virtual</span> ParsedPrototype ParsePrototype (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">stringPrototype,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">commentTypeID</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Converts a raw text prototype into a ParsedPrototype.</div></div>",1964:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1964\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public virtual</span> ParsedClassPrototype ParseClassPrototype (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">stringPrototype,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">commentTypeID</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Converts a raw text prototype into a ParsedClassPrototype.&nbsp; Will return null if it is not an appropriate prototype.</div></div>",1965:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1965\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public virtual void</span> SyntaxHighlight (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">source</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Applies SyntaxHighlightingTypes to the tokenized content.</div></div>",1966:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1966\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> SyntaxHighlight (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">ParsedPrototype&nbsp;</td><td class=\"PName last\">prototype</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Applies SyntaxHighlightingTypes to the ParsedPrototype.</div></div>",1967:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1967\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> SyntaxHighlight (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">ParsedClassPrototype&nbsp;</td><td class=\"PName last\">prototype</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Applies SyntaxHighlightingTypes to the ParsedClassPrototype.</div></div>",1968:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1968\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">override public</span> List&lt;PossibleDocumentationComment&gt; GetPossibleDocumentationComments (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">source</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the file looking for comments that could possibly contain documentation and returns them as a list.&nbsp; These comments are not guaranteed to have documentation in them, just to be acceptable candidates for them.&nbsp; If there are no comments it will return an empty list.</div></div>",1969:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1969\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual public bool</span> IsBuiltInType (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">type</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the type string is a built-in type such as &quot;int&quot; as opposed to a user-defined type.</div></div>",1970:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1970\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> IsBuiltInType (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">end</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the text between the iterators is a built-in type such as &quot;int&quot; as opposed to a user-defined type.</div></div>",1971:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1971\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> IsSameCodeElement (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Topic&nbsp;</td><td class=\"PName last\">topicA,</td></tr><tr><td class=\"PType first\">Topic&nbsp;</td><td class=\"PName last\">topicB</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the two topics represent the same code element.&nbsp; For example, the same function appearing in C++ header and source files, or the same C# class defined across multiple files with the &quot;partial&quot; keyword.</div></div>",1804:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype1804\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> Languages.Manager Manager { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The Languages.Manager associated with this language.</div></div>",1805:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype1805\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> Engine.Instance EngineInstance { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">The Engine.Instance associated with this language.</div></div>",1806:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype1806\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> SimpleIdentifier { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">The name of the language using only the letters A to Z.</div></div>",1807:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype1807\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> LanguageType Type { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">The type of the language or file.</div></div>",1808:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype1808\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> MemberOperator { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">A string representing the default member operator symbol.</div></div>",1809:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype1809\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> LineExtender { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">A string representing the line extender symbol if line breaks are significant to the language.</div></div>",1810:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1810\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> PrototypeEnders GetPrototypeEnders (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">commentTypeID</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the PrototypeEnders for the passed comment type, or null if there are none.</div></div>",1811:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1811\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> SetPrototypeEnders (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">commentTypeID,</td></tr><tr><td class=\"PType first\">PrototypeEnders&nbsp;</td><td class=\"PName last\">prototypeEnders</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Sets the PrototypeEnders for the passed comment type.</div></div>",1812:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1812\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public int</span>[] GetCommentTypesWithPrototypeEnders()</div><div class=\"TTSummary\">Returns an array of all the comment types that have prototype enders defined, or null if none.</div></div>",1813:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype1813\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> EnumValues EnumValue { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">How enum values are referenced.</div></div>",1814:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype1814\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> CaseSensitive { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">Whether the language\'s identifiers are case sensitive.</div></div>",1815:"<div class=\"NDToolTip TGroup LCSharp\"><div class=\"TTSummary\">These properties do not affect the equality operators.</div></div>",1816:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype1816\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> InSystemFile { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">Whether this language was defined in the system Languages.txt file.</div></div>",1817:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype1817\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> InProjectFile { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">Whether this language was defined in the project Languages.txt file.</div></div>",1818:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype1818\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> InConfigFiles { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Whether this language was defined in either of the Languages.txt files.</div></div>",1819:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype1819\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> InBinaryFile { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">Whether this language was present in Languages.nd.</div></div>",1820:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype1820\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> Predefined { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">Whether this language is predefined by Natural Docs.</div></div>",1822:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1822\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span> == (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Language&nbsp;</td><td class=\"PName last\">language1,</td></tr><tr><td class=\"PType first\">Language&nbsp;</td><td class=\"PName last\">language2</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether all the properties of the two languages are equal, including Name and ID, but excluding flags.</div></div>",1823:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1823\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool operator</span> != (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Language&nbsp;</td><td class=\"PName last\">language1,</td></tr><tr><td class=\"PType first\">Language&nbsp;</td><td class=\"PName last\">language2</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns if any of the properties of the two languages are inequal, including Name and ID, but excluding flags.</div></div>",1824:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1824\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool</span> StringArraysAreEqual (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>[]&nbsp;</td><td class=\"PName last\">array1,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>[]&nbsp;</td><td class=\"PName last\">array2</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Compares two arrays of strings, ignoring the order they exist in.&nbsp; Is case sensitive and safe to use with nulls.</div></div>",1825:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1825\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static bool</span> StringPairArraysAreEqual (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>[]&nbsp;</td><td class=\"PName last\">array1,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>[]&nbsp;</td><td class=\"PName last\">array2</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Compares two arrays of string pairs, ignoring the order they exist in.&nbsp; Is case sensitive and safe to use with nulls.</div></div>",1826:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1826\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected static bool</span> PrototypeEndersAreEqual (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">SafeDictionary&lt;<span class=\"SHKeyword\">int</span>, PrototypeEnders&gt;&nbsp;</td><td class=\"PName last\">commentTypesToPrototypeEnders1,</td></tr><tr><td class=\"PType first\">SafeDictionary&lt;<span class=\"SHKeyword\">int</span>, PrototypeEnders&gt;&nbsp;</td><td class=\"PName last\">commentTypesToPrototypeEnders2</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Compares two prototype ender dictionaries.&nbsp; Is case sensitive and safe to use with nulls.</div></div>",1828:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1828\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public override bool</span> Equals (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">o</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",1829:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1829\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public override int</span> GetHashCode ()</div></div>",1973:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1973\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual</span> List&lt;Element&gt; GetCommentElements (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;PossibleDocumentationComment&gt;&nbsp;</td><td class=\"PName last\">possibleDocumentationComments</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the PossibleDocumentationComments looking for comment Elements that should be included in the output.&nbsp; If there are none, it will return an empty list.</div></div>",1974:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1974\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public virtual</span> List&lt;Element&gt; GetCodeElements (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">source</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the file looking for code Elements that should be included in the output.&nbsp; If there are none or the language doesn\'t have full support, it will return an empty list.</div></div>",1975:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1975\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual void</span> AddBasicPrototypes (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">source,</td></tr><tr><td class=\"PType first\">List&lt;Element&gt;&nbsp;</td><td class=\"PName last\">elements,</td></tr><tr><td class=\"PType first\">List&lt;PossibleDocumentationComment&gt;&nbsp;</td><td class=\"PName last\">possibleDocumentationComments</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Adds prototypes to the Topics for languages with basic support.&nbsp; It examines the code between the end of each comment topic and the next one (or the next PossibleDocumentationComment) and if it finds the topic title before it finds one of the language\'s prototype enders the prototype will be set to the code between the topic and the ender.</div></div>",1976:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1976\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual void</span> AddBasicPrototype (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Topic&nbsp;</td><td class=\"PName last\">topic,</td></tr><tr><td class=\"PType first\">LineIterator&nbsp;</td><td class=\"PName last\">startCode,</td></tr><tr><td class=\"PType first\">LineIterator&nbsp;</td><td class=\"PName last\">endCode</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Attempts to find a prototype for the passed Topic between the iterators.&nbsp; If one is found, it will be normalized and put in &lt;Topic.Prototoype&gt;.</div></div>",1977:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1977\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual string</span> NormalizePrototype (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">input</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Puts the passed prototype in a form that\'s appropriate for the rest of the program.&nbsp; It assumes the syntax is valid.&nbsp; If you already have the input in a Tokenizer, it is more efficient to call NormalizePrototype(tokenizer).</div></div>",1978:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1978\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual string</span> NormalizePrototype (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">input</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Puts the passed prototype in a form that\'s appropriate for the rest of the program.&nbsp; It assumes the syntax is valid.</div></div>",1979:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1979\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual void</span> ApplyCommentPrototypes (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;Element&gt;&nbsp;</td><td class=\"PName last\">elements</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the Topics and looks for prototype code blocks.&nbsp; If it finds any, it removes them from the body and sets them as the topic prototype.&nbsp; If the topic already had a prototype it will be overwritten.</div></div>",1980:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1980\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> ApplyPrototypeAccessLevels (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;Element&gt;&nbsp;</td><td class=\"PName last\">elements</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the Topics and applies any AccessLevels it finds in the prototypes.&nbsp; This will not override any existing AccessLevels.</div></div>",1981:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1981\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected</span> List&lt;Element&gt; MergeElements (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;Element&gt;&nbsp;</td><td class=\"PName last\">commentElements,</td></tr><tr><td class=\"PType first\">List&lt;Element&gt;&nbsp;</td><td class=\"PName last\">codeElements</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Combines code and comment Elements into one list.&nbsp; The original Elements and/or Topics may be reused so don\'t use them after calling this function.</div></div>",1982:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1982\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> CanMergeTopics (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Topic&nbsp;</td><td class=\"PName last\">commentTopic,</td></tr><tr><td class=\"PType first\">Topic&nbsp;</td><td class=\"PName last\">codeTopic,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">allowHeaderlessTopics</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns whether the Topics match and can be merged.&nbsp; It is safe to pass null to this function.&nbsp; If either topic is null it will return false, even if both are.</div></div>",1983:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1983\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected</span> Topic MergeTopics (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Topic&nbsp;</td><td class=\"PName last\">commentTopic,</td></tr><tr><td class=\"PType first\">Topic&nbsp;</td><td class=\"PName last\">codeTopic</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Combines the properties of the two Topics and returns a new one.</div></div>",1984:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1984\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> RemoveHeaderlessTopics (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;Element&gt;&nbsp;</td><td class=\"PName last\">elements</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Deletes any Topics which do not have the Title field set, which means they were headerless and they were never merged with a code topic.&nbsp; It will remove their Elements if they serve no other purpose.</div></div>",1985:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1985\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> AddAutomaticGrouping (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;Element&gt;&nbsp;</td><td class=\"PName last\">elements</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Adds automatic grouping to the Elements.&nbsp; Returns whether anything was changed.</div></div>",1986:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1986\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected int</span> AddAutomaticGroupingToParent (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;Element&gt;&nbsp;</td><td class=\"PName last\">elements,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">parentIndex</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Adds automatic grouping to the Elements that belong to the passed parent.&nbsp; It will return the number of elements added to the list, or zero if none.</div></div>",1987:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1987\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected int</span> AddAutomaticGroupingToRange (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;Element&gt;&nbsp;</td><td class=\"PName last\">elements,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">startIndex,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">endIndex</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Adds automatic grouping to the Elements between the indexes.&nbsp; It assumes they are all in the same scope and there are no ParentElements in this range.&nbsp; It will return the number of elements added to the list, or zero if none.</div></div>",1988:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1988\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> ApplyFileAndLanguageIDs (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;Element&gt;&nbsp;</td><td class=\"PName last\">elements,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">defaultFileID,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">defaultLanguageID</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through all the Elements with Topics and applies the FileID and LanguageID properties.&nbsp; All Topics will be set to the passed FileID, but the LanguageID will be inherited from the ParentElements, or set to the default if none of them have one.</div></div>",1989:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1989\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> ApplyDeclaredAccessLevels (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;Element&gt;&nbsp;</td><td class=\"PName last\">elements</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Makes sure all Topics have DeclaredAccessLevel set.&nbsp; If one doesn\'t, it will be retrieved from the first ParentElement that has DefaultDeclaredChildAccessLevel set.&nbsp; If none do, it will be set to Public.</div></div>",1990:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1990\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> GenerateEffectiveAccessLevels (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;Element&gt;&nbsp;</td><td class=\"PName last\">elements</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Calculates EffectiveAccessLevel for all Topics by combining its declared access level with the maximum effective access levels found it its ParentElements.&nbsp; It assumes all Topics already have DeclaredAccessLevel set.</div></div>",1991:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1991\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected</span> AccessLevel GenerateEffectiveAccessLevel (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">AccessLevel&nbsp;</td><td class=\"PName last\">current,</td></tr><tr><td class=\"PType first\">AccessLevel&nbsp;</td><td class=\"PName last\">maximum</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Combines the existing access level with the passed maximum and returns the new, limited level.&nbsp; The current level must be set.&nbsp; The maximum level may be unknown in which case it has no effect.</div></div>",1992:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1992\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> ApplyTags (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;Element&gt;&nbsp;</td><td class=\"PName last\">elements</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Makes sure all Topics inherit the tags of their parents.</div></div>",1993:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1993\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> GenerateRemainingSymbols (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;Element&gt;&nbsp;</td><td class=\"PName last\">elements</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Finds any Topics that don\'t have their symbols set and generates them.&nbsp; It will also generate ClassStrings and ParentElement.ChildContextStrings when appropriate.</div></div>",1994:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1994\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> ApplyUsingStatements (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;Element&gt;&nbsp;</td><td class=\"PName last\">elements</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Fills in each ParentElement.ChildContextStrings\'s using statements by combining them with every parents\' statements.</div></div>",1995:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1995\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> ApplyContexts (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;Element&gt;&nbsp;</td><td class=\"PName last\">elements</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Fills in each Topic\'s PrototypeContext and BodyContext settings.&nbsp; For ParentElements the prototype will use next higher ContextString and the body will use its own.&nbsp; For other Elements they will both use their parents\' contexts.</div></div>",1996:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1996\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> ApplyClassStrings (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;Element&gt;&nbsp;</td><td class=\"PName last\">elements</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Makes sure each Topic\'s ClassString is set.&nbsp; If any Topic doesn\'t have one it will search its ParentElements for a default.</div></div>",1997:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1997\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> ExtractClassParentLinks (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;Element&gt;&nbsp;</td><td class=\"PName last\">elements</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Fills in Element.ClassParentLinks for any relevant Topics.&nbsp; It is assumed that Topics already have all ClassStrings, ContextStrings, language ID, and file ID set.</div></div>",1998:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1998\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected int</span> FindElementParent (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;Element&gt;&nbsp;</td><td class=\"PName last\">elements,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">elementIndex</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Returns the index of the element\'s immediate parent, or -1 if there isn\'t one.</div></div>",2000:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2000\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected</span> ParsedPrototype.ParameterStyle DetectParameterStyle (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">end</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Determines whether the <b>single</b> parameter between the iterators uses the C or Pascal style.&nbsp; Note that a Pascal prototype may contain individual parameters that look like C style parameters, but it should always have at least one that looks like a Pascal style parameter.</div></div>",2001:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2001\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected</span> ParsedPrototype.ParameterStyle DetectParameterStyle (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">ParsedPrototype&nbsp;</td><td class=\"PName last\">prototype</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Determines whether the parameters in this prototype use the C or Pascal style.</div></div>",2002:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2002\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> MarkCParameter (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">end</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Marks the tokens in the C-style parameter specified by the bounds with CommentParsingTypes.</div></div>",2003:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2003\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> MarkPascalParameter (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">end</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Marks the tokens in the Pascal-style parameter specified by the bounds with CommentParsingTypes.</div></div>",2004:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2004\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> MarkTypeAndModifiers (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">end</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Marks the passed stretch of tokens with PrototypeParsingTypes for variable types and preceding modifiers.</div></div>",2005:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2005\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> MarkType (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">end</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Marks the passed stretch of tokens with PrototypeParsingTypes for variable types.</div></div>",2006:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2006\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> MarkTypeSuffix (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">end</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Marks the passed stretch of tokens with PrototypeParsingTypes for variable type suffixes.&nbsp; Opening and closing brackets will be searched for nested types.</div></div>",2007:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2007\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> MarkTypeSuffixParamList (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">end</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Marks the passed stretch of tokens with PrototypeParsingTypes for parameter lists appearing in a variable type suffix.&nbsp; This is used for things like finding the classes in &quot;List&lt;ClassA, ClassB&gt;&quot;.</div></div>",2008:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2008\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> MarkTypeSuffixParam (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">end</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Marks the passed stretch of tokens with PrototypeParsingTypes for a variable type suffix parameter.</div></div>",2009:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2009\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> MarkName (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">end</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Marks the passed stretch of tokens with PrototypeParsingTypes for variable names.</div></div>",2011:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2011\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipWhitespace (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">includeLineBreaks&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">true</span>,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on whitespace or a comment, move past it and return true.</div></div>",2012:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2012\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipComment (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on a comment symbol, moves it past the entire comment and returns true.&nbsp; If you need information about the specific type of comment it was, you need to call TryToSkipLineComment() and TryToSkipBlockComment() individually.</div></div>",2013:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2013\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipLineComment (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">commentSymbol,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on a line comment symbol, moves it past the entire comment, provides the symbol that was used, and returns true.&nbsp; It will not skip the line break after the comment since that may be relevant to the calling code.</div></div>",2014:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2014\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipLineComment (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on a line comment symbol, moves it past the entire comment and returns true.&nbsp; It will not skip the line break after the comment since that may be relevant to the calling code.</div></div>",2015:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2015\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipBlockComment (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">openingSymbol,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">closingSymbol,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on an opening block comment symbol, moves it past the entire comment, provides the comment symbols that were used, and returns true.</div></div>",2016:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2016\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipBlockComment (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on an opening block comment symbol, moves it past the entire comment and returns true.</div></div>",2017:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2017\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipString (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on a quote or apostrophe, moves it past the entire string and returns true.</div></div>",2018:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2018\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipNumber (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on a numeric literal, moves the iterator past it and returns true.</div></div>",2019:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2019\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipBlock (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">iterator,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">includeAngleBrackets</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on an opening symbol, moves it past the entire block and returns true.&nbsp; This takes care of nested blocks, strings, and comments, but otherwise doesn\'t parse the underlying code.&nbsp; You must specify whether to include &lt; as an opening symbol because it may be relevant in some places (template definitions) but detrimental in others (general code where &lt; could mean less than and not have a closing &gt;.)</div></div>",2020:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2020\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipTypeOrVarName (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">iterator,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">limit</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on what could be a complex type or variable name, moves the iterator past it and returns true.&nbsp; This supports things like name, $name, PkgA::Class*, int[], and List&lt;List&lt;void*, float&gt;&gt;.&nbsp; It does not include anything separated by a space, so modifiers like unsigned and const have to be handled separately.</div></div>",2021:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2021\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> ResetTokensBetween (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">start,</td></tr><tr><td class=\"PType first\">TokenIterator&nbsp;</td><td class=\"PName last\">end,</td></tr><tr><td class=\"PType first\">ParseMode&nbsp;</td><td class=\"PName last\">mode</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the mode is ParseMode.SyntaxHighlight, ParseMode.ParsePrototype, or ParseMode.ParseClassPrototype, this will reset the relevant tokens between the iterators back to null.&nbsp; For other modes it has no effect.</div></div>",2023:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2023\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> SimpleSyntaxHighlight (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName\">source,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PType first\">StringSet&nbsp;</td><td class=\"PName\">keywords&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Applies syntax highlighting based on the passed keywords with the assumption that there\'s no unusual rules for comments or strings, and there\'s nothing like unquoted regular expressions to confuse a simple parser.&nbsp; If no keywords are passed it uses defaultKeywords.</div></div>",2024:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2024\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> ValidateElements (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;Element&gt;&nbsp;</td><td class=\"PName last\">elements,</td></tr><tr><td class=\"PType first\">ValidateElementsMode&nbsp;</td><td class=\"PName last\">mode</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Validates a list of Elements to make sure all the properties are set correctly, throwing an exception if not.&nbsp; This does nothing in non-debug builds.</div></div>",1831:"<div class=\"NDToolTip TVariable LCSharp\"><div class=\"TTSummary\">The Languages.Manager this language is associated with.</div></div>",1832:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype1832\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> Languages.Manager manager</div></div>",1833:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype1833\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected string</span> simpleIdentifier</div><div class=\"TTSummary\">The language\'s name using only the letters A to Z, or null if it\'s not defined.</div></div>",1834:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype1834\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> LanguageType type</div><div class=\"TTSummary\">The type of the language or file.</div></div>",1835:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype1835\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected string</span> memberOperator</div><div class=\"TTSummary\">A string representing the default member operator symbol.</div></div>",1836:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype1836\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> SafeDictionary&lt;<span class=\"SHKeyword\">int</span>, PrototypeEnders&gt; commentTypesToPrototypeEnders</div><div class=\"TTSummary\">A dictionary mapping comment type IDs to PrototypeEnders.</div></div>",1837:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype1837\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected string</span> lineExtender</div><div class=\"TTSummary\">A string representing the line extender symbol if line breaks are significant to the language.</div></div>",1838:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype1838\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> EnumValues enumValue</div><div class=\"TTSummary\">How the language handles enum values.</div></div>",1839:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype1839\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected bool</span> caseSensitive</div><div class=\"TTSummary\">Whether the language is case sensitive or not.</div></div>",1840:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype1840\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> LanguageFlags flags</div><div class=\"TTSummary\">A combination of &lt;FlagValues&gt; describing the language.</div></div>",2026:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype2026\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">static protected</span> StringSet defaultKeywords</div><div class=\"TTSummary\">A set of the default keywords for basic language support across all languages.</div></div>",2027:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype2027\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">static protected string</span>[] inheritanceKeywords</div><div class=\"TTSummary\">A list of default keywords for searching for class parents across all languages.</div></div>",2028:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype2028\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">static protected</span> Regex.Comments.AcceptablePrototypeComments acceptablePrototypeCommentRegex</div></div>",2029:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype2029\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">static protected</span> Regex.Languages.ExtraOperatorWhitespace extraOperatorWhitespaceRegex</div></div>"});