NDContentPage.OnToolTipsLoaded({241:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype241\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Collections.</span>&#8203;StringSet</div></div></div><div class=\"TTSummary\">A general lookup table for tracking the existence of strings in a set.&nbsp; This is preferable to a HashSet class because</div></div>",1641:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1641\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Languages.</span>&#8203;ParentElement</div></div></div><div class=\"TTSummary\">A Element that also may contain child elements.&nbsp; This is used not only for classes but for groups (so that settings may be inherited) and list topics and enums (to store embedded topics.)</div></div>",1670:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1670\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Languages.</span>&#8203;Manager</div></div></div><div class=\"TTSummary\">A module to handle Languages.txt and all the language parsers within Natural Docs.</div></div>",1696:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype1696\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> AttributeTarget : <span class=\"SHKeyword\">byte</span></div></div>",1724:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1724\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipUnqualifiedIdentifier (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Tries to move the iterator past a single unqualified identifier, which means only &quot;X&quot; in &quot;X.Y.Z&quot;.</div></div>",1727:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1727\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipAttributes (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">AttributeTarget&nbsp;</td><td class=\"PName\">type&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">AttributeTarget.Any,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">PrototypeParsingType&nbsp;</td><td class=\"PName\">prototypeParsingType&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">PrototypeParsingType.TypeModifier</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Tries to move the iterator past a group of attributes which may be separated by whitespace.</div></div>",1732:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1732\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> GenericSkip (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">angleBracketsAsBlocks&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">false</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Advances the iterator one place through general code.</div></div>",1733:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1733\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected void</span> GenericSkipUntilAfter (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">char</span>&nbsp;</td><td class=\"PName\">symbol,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">angleBracketsAsBlocks&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">false</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Advances the iterator via GenericSkip() until a specific symbol is reached and passed.</div></div>",1786:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1786\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Languages.</span>&#8203;Language</div></div></div><div class=\"TTSummary\">A class encapsulating information about a language.&nbsp; This differs from ConfigFileLanguage in that its meant to represent the final combined settings of a language rather than its entry in a config file.&nbsp; For example, this class doesn\'t store the language\'s extensions or shebang strings.</div></div>",1841:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1841\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Languages.</span>&#8203;Element</div></div></div><div class=\"TTSummary\">A class to hold an element found when parsing the code or comments.</div></div>",1935:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype1935\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> AccessLevel : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">An enum representing a member access level.</div></div>",1936:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">The access level is unknown.&nbsp; This should only be used with comments or code elements under basic language support.&nbsp; It should never be used with code elements under full language support.</div></div>",3124:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3124\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Symbols.</span>&#8203;SymbolString</div></div></div><div class=\"TTSummary\">A struct encapsulating a symbol string, which is a normalized way of representing a hierarchal code element or topic, such as &quot;PackageA.PackageB.FunctionC&quot;.</div></div>",3287:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3287\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> PrototypeParsingType : <span class=\"SHKeyword\">byte</span></div></div>",3289:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">The first token of a new pre-prototype line.&nbsp; Each token marked with this starts a new line.</div></div>",3290:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">Part of a line that should be shown before the prototype.</div></div>",3294:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">A separate word modifying a type, such as &quot;const&quot; in &quot;const int&quot;.</div></div>",3295:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">Everything prior to the ending word in a qualified type, such as &quot;PkgA.PkgB.&quot; in &quot;PkgA.PkgB.Class&quot;.</div></div>",3296:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">The type excluding all modifiers and qualifiers, such as &quot;int&quot; in &quot;unsigned int&quot; or &quot;Class&quot; in &quot;PkgA.PkgB.Class&quot;.</div></div>",3297:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">An opening symbol after a type, such as &quot;[&quot; in &quot;int[]&quot; or &quot;&lt;&quot; in &quot;List&lt;int&gt;&quot;.</div></div>",3298:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">A closing symbol after a type, such as &quot;]&quot; in &quot;int[]&quot; or &quot;&gt;&quot; in &quot;List&lt;int&gt;&quot;.</div></div>",3303:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">The name of the parameter or the code element being defined by the prototype.</div></div>",3304:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">Any symbols appearing after a name, such as &quot;[]&quot; in &quot;int x[]&quot;, that are actually part of its type.&nbsp; Unlike with types, we don\'t have to distinguish between opening and closing symbols to search for nested types.</div></div>",3307:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">The first token of a new post-prototype line.&nbsp; Each token marked with this starts a new line.</div></div>",3308:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">Part of a line that should be shown after the prototype.</div></div>",3311:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">The first token of a new pre-prototype line.&nbsp; Each token marked with this starts a new line.</div></div>",3312:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">Part of a line that should be shown before the prototype.</div></div>",3318:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">The name of the class or parent including qualifiers, such as &quot;PkgA.PkgB.Class&quot;.</div></div>",3319:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">Extra template information after a class or parent, such as &quot;&lt;T&gt;&quot; in &quot;List&lt;T&gt;&quot;.</div></div>",3321:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">Part of a line that should be shown after the prototype.</div></div>",3323:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3323\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;Tokenizer</div></div></div><div class=\"TTSummary\">A class for dividing a block of text into easily navigable tokens.&nbsp; See FundamentalType for a description of how they are divided up by default.</div></div>",3415:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3415\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;TokenIterator</div></div></div><div class=\"TTSummary\">An iterator for efficiently walking through the tokens in Tokenizer while keeping track of the line number and offset into the raw text.</div></div>",3820:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3820\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.</span>&#8203;ParsedPrototype</div></div></div><div class=\"TTSummary\">A class that wraps a Tokenizer for a prototype that\'s been marked with PrototypeParsingTypes, providing easier access to things like parameter lines.</div></div>",3875:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3875\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.</span>&#8203;ParsedClassPrototype</div></div></div><div class=\"TTSummary\">A class that wraps a Tokenizer for a prototype that\'s been marked with ClassPrototypeParsingTypes, providing easier access to things like parent lines.</div></div>"});