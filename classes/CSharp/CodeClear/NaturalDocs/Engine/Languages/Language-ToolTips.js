NDContentPage.OnToolTipsLoaded({241:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype241\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Collections.</span>&#8203;StringSet</div></div></div><div class=\"TTSummary\">A general lookup table for tracking the existence of strings in a set.&nbsp; This is preferable to a HashSet class because</div></div>",276:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype276\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Collections.</span>&#8203;SafeDictionary&#8203;<span class=\"TemplateSignature\">&lt;KeyType, ValueType&gt;</span></div></div></div><div class=\"TTSummary\">A variation of .NET\'s Dictionary class that uses null returns instead of exceptions.</div></div>",742:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype742\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Comments.</span>&#8203;PossibleDocumentationComment</div></div></div><div class=\"TTSummary\">A class representing a comment found in source code which could possibly contain documentation.</div></div>",783:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype783\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> Parse (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">PossibleDocumentationComment&nbsp;</td><td class=\"PName last\">comment,</td></tr><tr><td class=\"PType first\">List&lt;Topic&gt;&nbsp;</td><td class=\"PName last\">topics</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Parses the passed comment for documentation.&nbsp; If successful it will return true and add Topics to the list.</div></div>",792:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype792\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public static</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Comments.</span>&#8203;LineFinder</div></div></div><div class=\"TTSummary\">A static class which finds vertical and horizontal lines in comments and marks them with Tokenization.CommentParsingType.CommentDecoration so that they can be ignored in later stages of parsing.</div></div>",1633:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1633\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Languages.</span>&#8203;PrototypeEnders</div></div></div><div class=\"TTSummary\">A simple class to hold information about what can end a prototype.</div></div>",1641:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1641\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Languages.</span>&#8203;ParentElement</div></div></div><div class=\"TTSummary\">A Element that also may contain child elements.&nbsp; This is used not only for classes but for groups (so that settings may be inherited) and list topics and enums (to store embedded topics.)</div></div>",1655:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype1655\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> ContextString ChildContextString { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">The ContextString all children should use, if set.&nbsp; Use ChildContextStringSet to see if this value is relevant, as null can be a valid value.&nbsp; Setting this value will automatically set ChildContextStringSet to true.</div></div>",1670:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1670\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Languages.</span>&#8203;Manager</div></div></div><div class=\"TTSummary\">A module to handle Languages.txt and all the language parsers within Natural Docs.</div></div>",1746:"<div class=\"NDToolTip TFile LCSharp\"><div class=\"TTSummary\">The configuration file that defines or overrides the language definitions for Natural Docs.&nbsp; One version sits in Natural Docs\' configuration folder, and another in the project configuration folder to add languages or override their behavior.</div></div>",1775:"<div class=\"NDToolTip TFile LCSharp\"><div class=\"TTSummary\">A binary file which stores the combined results of the two versions of Languages.txt as of the last run, as well as storing the IDs of each type so they maintain their consistency between runs.</div></div>",1786:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1786\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Languages.</span>&#8203;Language</div></div></div><div class=\"TTSummary\">A class encapsulating information about a language.&nbsp; This differs from ConfigFileLanguage in that its meant to represent the final combined settings of a language rather than its entry in a config file.&nbsp; For example, this class doesn\'t store the language\'s extensions or shebang strings.</div></div>",1788:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype1788\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> EnumValues : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">Can be Global, UnderType, or UnderParent.</div></div>",1789:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype1789\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> LanguageType : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">The type of language or file this is.</div></div>",1792:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">The file is a text file.</div></div>",1794:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype1794\" class=\"NDPrototype NoParameterForm\"><div class=\"PPrePrototypeLine\"><span class=\"SHMetadata\">[Flags]</span></div><span class=\"SHKeyword\">protected enum</span> LanguageFlags : <span class=\"SHKeyword\">byte</span></div></div>",1795:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">Set if the language was defined in the system config file Languages.txt.</div></div>",1796:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">Set if the language was defined in the project config file Languages.txt.&nbsp; Not set for Alter Language.</div></div>",1841:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1841\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Languages.</span>&#8203;Element</div></div></div><div class=\"TTSummary\">A class to hold an element found when parsing the code or comments.</div></div>",1852:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype1852\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> List&lt;Link&gt; ClassParentLinks { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">A list of class parent Links created by this element, or null if none.</div></div>",1863:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1863\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Languages.</span>&#8203;ConfigFileLanguage</div></div></div><div class=\"TTSummary\">A class encapsulating information about a language as it appears in Languages.txt.&nbsp; This differs from Language in that its meant to represent its entry in a config file rather than the final combined settings of a language.</div></div>",1912:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1912\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Languages.</span>&#8203;CommentFinder</div></div></div><div class=\"TTSummary\">A class that handles finding possible documenatation comments in any source file in a generic way.</div></div>",1915:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1915\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> List&lt;PossibleDocumentationComment&gt; GetPossibleDocumentationComments (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">source</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the source looking for comments that could possibly contain documentation and returns them as a list.&nbsp; These comments are not guaranteed to have documentation in them, just to be acceptable candidates for them.&nbsp; If there are no comments it will return an empty list.</div></div>",1935:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype1935\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> AccessLevel : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">An enum representing a member access level.</div></div>",1944:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype1944\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> ParseMode : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">What type of processing individual parsing functions will perform.&nbsp; Not every mode is appropriate for every function, but passing an unsupported mode would just be the equivalent of using IterateOnly.</div></div>",1945:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">The function will simply move the iterator past the tokens.</div></div>",1947:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">The function will apply SyntaxHighlightingTypes to the tokens.</div></div>",1948:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">The function will apply PrototypeParsingTypes to the tokens.</div></div>",1949:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">The function will apply ClassPrototypeParsingTypes to the tokens.</div></div>",1950:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype1950\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> ParseResult : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">The result of a Parse() operation.</div></div>",1955:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype1955\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected enum</span> ValidateElementsMode : <span class=\"SHKeyword\">byte</span></div></div>",1961:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1961\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual public</span> ParseResult Parse (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">Path&nbsp;</td><td class=\"PName last\">filePath,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">fileID,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">CancelDelegate&nbsp;</td><td class=\"PName last\">cancelDelegate,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">IList&lt;Topic&gt;&nbsp;</td><td class=\"PName last\">topics,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\">LinkSet&nbsp;</td><td class=\"PName last\">classParentLinks</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Parses the passed file and returns it as a list of Topics and class parent Links.&nbsp; Set cancelDelegate for the ability to interrupt parsing, or use Delegates.NeverCancel if that\'s not needed.</div></div>",1973:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1973\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual</span> List&lt;Element&gt; GetCommentElements (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;PossibleDocumentationComment&gt;&nbsp;</td><td class=\"PName last\">possibleDocumentationComments</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the PossibleDocumentationComments looking for comment Elements that should be included in the output.&nbsp; If there are none, it will return an empty list.</div></div>",1974:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1974\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public virtual</span> List&lt;Element&gt; GetCodeElements (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Tokenizer&nbsp;</td><td class=\"PName last\">source</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Goes through the file looking for code Elements that should be included in the output.&nbsp; If there are none or the language doesn\'t have full support, it will return an empty list.</div></div>",1976:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1976\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual void</span> AddBasicPrototype (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Topic&nbsp;</td><td class=\"PName last\">topic,</td></tr><tr><td class=\"PType first\">LineIterator&nbsp;</td><td class=\"PName last\">startCode,</td></tr><tr><td class=\"PType first\">LineIterator&nbsp;</td><td class=\"PName last\">endCode</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Attempts to find a prototype for the passed Topic between the iterators.&nbsp; If one is found, it will be normalized and put in &lt;Topic.Prototoype&gt;.</div></div>",1977:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1977\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual string</span> NormalizePrototype (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">input</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Puts the passed prototype in a form that\'s appropriate for the rest of the program.&nbsp; It assumes the syntax is valid.&nbsp; If you already have the input in a Tokenizer, it is more efficient to call NormalizePrototype(tokenizer).</div></div>",2012:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2012\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipComment (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on a comment symbol, moves it past the entire comment and returns true.&nbsp; If you need information about the specific type of comment it was, you need to call TryToSkipLineComment() and TryToSkipBlockComment() individually.</div></div>",2013:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2013\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipLineComment (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">commentSymbol,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on a line comment symbol, moves it past the entire comment, provides the symbol that was used, and returns true.&nbsp; It will not skip the line break after the comment since that may be relevant to the calling code.</div></div>",2015:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2015\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipBlockComment (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">openingSymbol,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">closingSymbol,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on an opening block comment symbol, moves it past the entire comment, provides the comment symbols that were used, and returns true.</div></div>",2017:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2017\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipString (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName\">iterator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\">ParseMode&nbsp;</td><td class=\"PName\">mode&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\">ParseMode.IterateOnly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on a quote or apostrophe, moves it past the entire string and returns true.</div></div>",2019:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype2019\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> TryToSkipBlock (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">TokenIterator&nbsp;</td><td class=\"PName last\">iterator,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">includeAngleBrackets</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">If the iterator is on an opening symbol, moves it past the entire block and returns true.&nbsp; This takes care of nested blocks, strings, and comments, but otherwise doesn\'t parse the underlying code.&nbsp; You must specify whether to include &lt; as an opening symbol because it may be relevant in some places (template definitions) but detrimental in others (general code where &lt; could mean less than and not have a closing &gt;.)</div></div>",2026:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype2026\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">static protected</span> StringSet defaultKeywords</div><div class=\"TTSummary\">A set of the default keywords for basic language support across all languages.</div></div>",2072:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype2072\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Links.</span>&#8203;LinkSet</div></div></div><div class=\"TTSummary\">A sorted list of Links that prevents duplicates from being added as determined by Link.CompareIDPropertiesTo().</div></div>",2104:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype2104\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Links.</span>&#8203;Link</div></div></div><div class=\"TTSummary\">A class encapsulating all the information available about a link.</div></div>",3206:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3206\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Symbols.</span>&#8203;ContextString</div></div></div><div class=\"TTSummary\">A struct encapsulating a context string, which is a normalized way of representing what scope and &quot;using&quot; statements are active at a given point.</div></div>",3234:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3234\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Symbols.</span>&#8203;ClassString</div></div></div><div class=\"TTSummary\">A struct encapsulating a class string, which is a normalized way of representing what class a given topic is in.&nbsp; This also covers databases and any other hierarchy that uses a class ID.</div></div>",3269:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3269\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> CommentParsingType : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">The type of token it is as is relevant to comment parsing.</div></div>",3271:"<div class=\"NDToolTip TConstant LCSharp\"><div class=\"TTSummary\">A comment symbol or part of one.</div></div>",3279:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3279\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> SyntaxHighlightingType : <span class=\"SHKeyword\">byte</span></div><div class=\"TTSummary\">The type of token it is as is relevant to prototype parsing.</div></div>",3287:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3287\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> PrototypeParsingType : <span class=\"SHKeyword\">byte</span></div></div>",3309:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3309\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> ClassPrototypeParsingType : <span class=\"SHKeyword\">byte</span></div></div>",3323:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3323\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;Tokenizer</div></div></div><div class=\"TTSummary\">A class for dividing a block of text into easily navigable tokens.&nbsp; See FundamentalType for a description of how they are divided up by default.</div></div>",3362:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3362\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> TokenIterator LastToken { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">A TokenIterator set to one past the last token of this object.</div></div>",3415:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3415\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;TokenIterator</div></div></div><div class=\"TTSummary\">An iterator for efficiently walking through the tokens in Tokenizer while keeping track of the line number and offset into the raw text.</div></div>",3485:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3485\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Tokenization.</span>&#8203;LineIterator</div></div></div><div class=\"TTSummary\">An iterator to go through a Tokenizer line by line instead of token by token.</div></div>",3611:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3611\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Topics.</span>&#8203;Topic</div></div></div><div class=\"TTSummary\">A class encapsulating all the information available about a topic.</div></div>",3786:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3786\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.</span>&#8203;Path</div></div></div><div class=\"TTSummary\">A struct encapsulating a file path string.&nbsp; This is needed because Natural Docs needs to be able to handle all three path formats at once, not just the local format.&nbsp; Natural Docs on Windows may be reading a configuration file from Natural Docs on Linux and vice versa.</div></div>",3820:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3820\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.</span>&#8203;ParsedPrototype</div></div></div><div class=\"TTSummary\">A class that wraps a Tokenizer for a prototype that\'s been marked with PrototypeParsingTypes, providing easier access to things like parameter lines.</div></div>",3822:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype3822\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public enum</span> ParameterStyle : <span class=\"SHKeyword\">byte</span></div></div>",3875:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3875\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.</span>&#8203;ParsedClassPrototype</div></div></div><div class=\"TTSummary\">A class that wraps a Tokenizer for a prototype that\'s been marked with ClassPrototypeParsingTypes, providing easier access to things like parent lines.</div></div>",3962:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3962\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.</span>&#8203;Instance</div></div></div><div class=\"TTSummary\">A class for managing the overall Natural Docs engine.</div></div>",4006:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype4006\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public static</span> CancelDelegate NeverCancel</div><div class=\"TTSummary\">A CancelDelegate that always returns false.</div></div>",4009:"<div class=\"NDToolTip TDelegate LCSharp\"><div id=\"NDPrototype4009\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public delegate bool</span> CancelDelegate ()</div><div class=\"TTSummary\">A delegate that returns a bool of whether to cancel an operation or not.</div></div>",1575:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1575\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Languages.&#8203;Parsers.</span>&#8203;ShebangScript</div></div></div><div class=\"TTSummary\">A container that parses the first line of a file for shebang (#!) strings and then uses that to determinewhich parser to send the rest of the file to.</div></div>",1579:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1579\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Languages.&#8203;Parsers.</span>&#8203;Ruby</div></div></div><div class=\"TTSummary\">Additional language support for Ruby.</div></div>",1586:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1586\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Languages.&#8203;Parsers.</span>&#8203;Python</div></div></div><div class=\"TTSummary\">Additional language support for Python.</div></div>",1597:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1597\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Languages.&#8203;Parsers.</span>&#8203;Perl</div></div></div><div class=\"TTSummary\">Additional language support for Perl.</div></div>",1694:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1694\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">CodeClear.&#8203;NaturalDocs.&#8203;Engine.&#8203;Languages.&#8203;Parsers.</span>&#8203;CSharp</div></div></div><div class=\"TTSummary\">Full language support parser for C#.</div></div>"});